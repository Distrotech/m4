This is Info file m4.info, produced by Makeinfo version 1.68 from the
input file m4.texinfo.

INFO-DIR-SECTION Text Processing Tools
START-INFO-DIR-ENTRY
* m4: (m4).			A powerful macro processor.
END-INFO-DIR-ENTRY

   This file documents the GNU `m4' utility.

   Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1998, 1999, 2000
Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.


File: m4.info,  Node: Syncoutput,  Prev: M4exit,  Up: Miscellaneous

Turning sync lines on and off within `m4'
=========================================

   If you need to toggle sync lines on and off while processing macros,
or to insure that they are off or on, you may do so using `syncoutput'.

   `syncoutput(1)', `syncoutput(on)', and `syncoutput(yes)' causes `m4'
to emit sync lines of the form: `#line <number> ["<filename>"]'.

   `syncoutput(0)', `syncoutput(off)', and `syncoutput(no)' turn them
off.

   All other arguments are ignored as is `syncoutput' without
parenthesis.


File: m4.info,  Node: Frozen files,  Next: Compatibility,  Prev: Miscellaneous,  Up: Top

Fast loading of frozen states
*****************************

   Some bigger `m4' applications may be built over a common base
containing hundreds of definitions and other costly initializations.
Usually, the common base is kept in one or more declarative files,
which files are listed on each `m4' invocation prior to the user's
input file, or else, `include''d from this input file.

   Reading the common base of a big application, over and over again,
may be time consuming.  GNU `m4' offers some machinery to speed up the
start of an application using lengthy common bases.  Presume the user
repeatedly uses:

     m4 base.m4 input.m4

with a varying contents of `input.m4', but a rather fixed contents for
`base.m4'.  Then, the user might rather execute:

     m4 -F base.m4f base.m4

once, and further execute, as often as needed:

     m4 -R base.m4f input.m4

with the varying input.  The first call, containing the `-F' option,
only reads and executes file `base.m4', so defining various application
macros and computing other initializations.  Only once the input file
`base.m4' has been completely processed, GNU `m4' produces on
`base.m4f' a "frozen" file, that is, a file which contains a kind of
snapshot of the `m4' internal state.

   Later calls, containing the `-R' option, are able to reload the
internal state of `m4''s memory, from `base.m4f', *prior* to reading
any other input files.  By this mean, instead of starting with a virgin
copy of `m4', input will be read after having effectively recovered the
effect of a prior run.  In our example, the effect is the same as if
file `base.m4' has been read anew.  However, this effect is achieved a
lot faster.

   Only one frozen file may be created or read in any one `m4'
invocation.  It is not possible to recover two frozen files at once.
However, frozen files may be updated incrementally, through using `-R'
and `-F' options simultaneously.  For example, if some care is taken,
the command:

     m4 file1.m4 file2.m4 file3.m4 file4.m4

could be broken down in the following sequence, accumulating the same
output:

     m4 -F file1.m4f file1.m4
     m4 -R file1.m4f -F file2.m4f file2.m4
     m4 -R file2.m4f -F file3.m4f file3.m4
     m4 -R file3.m4f file4.m4

   This could also be done in a simple way, if everything has been
prepared before:

     m4 -F file1.m4f file1.m4 file2.m4 file3.m4 file4.m4

   Some care is necessary because not every effort has been made for
this to work in all cases.  In particular, the trace attribute of
macros is not handled, nor the current setting of `changeword'.  Also,
interactions for some options of `m4' being used in one call and not
for the next, have not been fully analyzed yet.  On the other end, you
may be confident that stacks of `pushdef''ed definitions are handled
correctly, so are `undefine''d or renamed builtins, changed strings for
quotes or comments.

   When an `m4' run is to be frozen, the automatic undiversion which
takes place at end of execution is inhibited.  Instead, all positively
numbered diversions are saved into the frozen file.  The active
diversion number is also transmitted.

   A frozen file to be reloaded need not reside in the current
directory.  It is looked up the same way as an `include' file (*note
Search Path::.).

   Frozen files are sharable across architectures.  It is safe to write
a frozen file on one machine and read it on another, given that the
second machine uses the same, or a newer version of GNU `m4'.  These
are simple (editable) text files, made up of directives, each starting
with a capital letter and ending with a newline (<NL>).  Wherever a
directive is expected, the character `#' introduces a comment line,
empty lines are also ignored.  In the following descriptions, LENGTHs
always refer to corresponding STRINGs.  Numbers are always expressed in
decimal.  The directives are:

`V NUMBER <NL>'
     Confirms the format of the file.  NUMBER should be 1.

`C LENGTH1 , LENGTH2 <NL> STRING1 STRING2 <NL>'
     Uses STRING1 and STRING2 as the beginning comment and end comment
     strings.

`Q LENGTH1 , LENGTH2 <NL> STRING1 STRING2 <NL>'
     Uses STRING1 and STRING2 as the beginning quote and end quote
     strings.

`F LENGTH1 , LENGTH2 <NL> STRING1 STRING2 <NL>'
     Defines, through `pushdef', a definition for STRING1 expanding to
     the function whose builtin name is STRING2.

`T LENGTH1 , LENGTH2 <NL> STRING1 STRING2 <NL>'
     Defines, though `pushdef', a definition for STRING1 expanding to
     the text given by STRING2.

`D NUMBER, LENGTH <NL> STRING <NL>'
     Selects diversion NUMBER, making it current, then copy STRING in
     the current diversion.  NUMBER may be a negative number for a
     non-existing diversion.  To merely specify an active selection,
     use this command with an empty STRING.  With 0 as the diversion
     NUMBER, STRING will be issued on standard output at reload time,
     however this may not be produced from within `m4'.


File: m4.info,  Node: Compatibility,  Next: Experiments,  Prev: Frozen files,  Up: Top

Compatibility with other versions of `m4'
*****************************************

   This chapter describes the differences between this implementation of
`m4', and the implementation found under UNIX, notably System V,
Release 3.

   There are also differences in BSD flavors of `m4'.  No attempt is
made to summarize these here.

* Menu:

* Extensions::                  Extensions in GNU m4
* Incompatibilities::           Facilities in System V m4 not in GNU m4
* Other Incompat::              Other incompatibilities


File: m4.info,  Node: Extensions,  Next: Incompatibilities,  Prev: Compatibility,  Up: Compatibility

Extensions in GNU `m4'
======================

   This version of `m4' contains a few facilities, that do not exist in
System V `m4'.  These extra facilities are all suppressed by using the
`-G' command line option, unless overridden by other command line
options.

   * In the `$'N notation for macro arguments, N can contain several
     digits, while the System V `m4' only accepts one digit.  This
     allows macros in GNU `m4' to take any number of arguments, and not
     only nine (*note Arguments::.).

   * Files included with `include' and `sinclude' are sought in a user
     specified search path, if they are not found in the working
     directory.  The search path is specified by the `-I' option and the
     `M4PATH' environment variable (*note Search Path::.).

   * Arguments to `undivert' can be non-numeric, in which case the named
     file will be included uninterpreted in the output (*note
     Undivert::.).

   * Formatted output is supported through the `format' builtin, which
     is modeled after the C library function `printf' (*note Format::.).

   * Searches and text substitution through regular expressions are
     supported by the `regexp' (*note Regexp::.) and `patsubst' (*note
     Patsubst::.) builtins.

   * The output of shell commands can be read into `m4' with `esyscmd'
     (*note Esyscmd::.).

   * There is indirect access to any builtin macro with `builtin'
     (*note Builtin::.).

   * Macros can be called indirectly through `indir' (*note Indir::.).

   * The name of the current input file and the current input line
     number are accessible through the builtins `__file__' and
     `__line__' (*note Errprint::.).

   * The generation of sync lines can be controlled through `syncoutput'
     (*note Syncoutput::.).

   * The format of the output from `dumpdef' and macro tracing can be
     controlled with `debugmode' (*note Debug Levels::.).

   * The destination of trace and debug output can be controlled with
     `debugfile' (*note Debug Output::.).

   In addition to the above extensions, GNU `m4' implements the
following command line options: `-F', `-G', `-I', `-L', `-R', `-V',
`-W', `-d', `-l', `-o' and `-t'.  *Note Invoking m4::, for a
description of these options.

   Also, the debugging and tracing facilities in GNU `m4' are much more
extensive than in most other versions of `m4'.


File: m4.info,  Node: Incompatibilities,  Next: Other Incompat,  Prev: Extensions,  Up: Compatibility

Facilities in System V `m4' not in GNU `m4'
===========================================

   The version of `m4' from System V contains a few facilities that
have not been implemented in GNU `m4' yet.

   * System V `m4' supports multiple arguments to `defn'.  This is not
     implemented in GNU `m4'.  Its usefulness is unclear to me.


File: m4.info,  Node: Other Incompat,  Prev: Incompatibilities,  Up: Compatibility

Other incompatibilities
=======================

   There are a few other incompatibilities between this implementation
of `m4', and the System V version.

   * GNU `m4' implements sync lines differently from System V `m4',
     when text is being diverted.  GNU `m4' outputs the sync lines when
     the text is being diverted, and System V `m4' when the diverted
     text is being brought back.

     The problem is which lines and file names should be attached to
     text that is being, or has been, diverted.  System V `m4' regards
     all the diverted text as being generated by the source line
     containing the `undivert' call, whereas GNU `m4' regards the
     diverted text as being generated at the time it is diverted.

     I expect the sync line option to be used mostly when using `m4' as
     a front end to a compiler.  If a diverted line causes a compiler
     error, the error messages should most probably refer to the place
     where the diversion were made, and not where it was inserted again.

   * GNU `m4' makes no attempt at prohiting autoreferential definitions
     like:

          define(`x', `x')
          define(`x', `x ')

     There is nothing inherently wrong with defining `x' to return `x'.
     The wrong thing is to expand `x' unquoted.  In `m4', one might
     use macros to hold strings, as we do for variables in other
     programming languages, further checking them with:

          ifelse(defn(`HOLDER'), `VALUE', ...)

     In cases like this one, an interdiction for a macro to hold its own
     name would be a useless limitation.  Of course, this leaves more
     rope for the GNU `m4' user to hang himself!  Rescanning hangs may
     be avoided through careful programming, a little like for endless
     loops in traditional programming languages.

   * GNU `m4' without `-G' option will define the macro `__gnu__' to
     expand to the empty string.

     On UNIX systems, GNU `m4' without the `-G' option will define the
     macro `__unix__', otherwise the macro `unix'.  Both will expand to
     the empty string.


File: m4.info,  Node: Experiments,  Next: Answers,  Prev: Compatibility,  Up: Top

Experimental features in GNU m4
*******************************

   Certain features of GNU `m4' are experimental.

   Some are only available if activated by an option given to
`configure' at GNU `m4' installation time.  The functionality might
change or even go away in the future.  *Do not rely on it*.  Please
direct your comments about it the same way you would do for bugs.

Changesyntax
============

   An experimental feature, which would improve `m4' usefulness, allows
for changing the way the input is parsed (*note Changesyntax::.).

   No compile time option is needed for `changesyntax'.

   The implementation does not seem to slow down `m4', more likely the
contrary.

Changeword
==========

   An experimental feature, which would improve `m4' usefulness, allows
for changing the syntax for what is a "word" in `m4'.  You should use:

     ./configure --enable-changeword

if you want this feature compiled in.  The current implementation slows
down `m4' considerably and is hardly acceptable.  So, it might go away,
do not count on it yet.

Multiple precision arithmetic
=============================

   Another experimental feature, which would improve `m4' usefulness,
allows for multiple precision rational arithmetic in `eval'.  You
should use:

     ./configure --with-gmp

if you want this feature compiled in.  The current implementation is
unproven and might go away.  Do not count on it yet.


File: m4.info,  Node: Answers,  Next: Concept index,  Prev: Experiments,  Up: Top

Answers
*******

   Some of the examples in this manuals are buggy.  Correctly working
macros are presented here.

   The `cleardivert' macro (*note Cleardiv::.) cannot, as it stands, be
called without arguments to clear all pending diversions.  A macro that
achieves that as well is:

     define(`cleardivert',
     `pushdef(`_num', divnum)divert(-1)ifelse($#, 0,
       `undivert`'', `undivert($@)')divert(_num)popdef(`_num')')

If called without arguments, it will call undivert without argument,
otherwise they will be passed to undivert().


File: m4.info,  Node: Concept index,  Next: Macro index,  Prev: Answers,  Up: Top

Concept index
*************

* Menu:

* Arguments to macros:                   Arguments.
* arguments to macros:                   Macro Arguments.
* arguments to macros, special:          Pseudo Arguments.
* arguments, quoted macro:               Quoting Arguments.
* arithmetic:                            Arithmetic.
* arrays:                                Define.
* builtins, indirect call of:            Builtin.
* call of builtins, indirect:            Builtin.
* call of macros, indirect:              Indir.
* changing comment delimiters:           Changecom.
* changing the quote delimiters:         Changequote.
* characters, translating:               Translit.
* command line, file names on the:       Invoking m4.
* command line, macro definitions on the: Invoking m4.
* command line, options:                 Invoking m4.
* commands, exit code from UNIX:         Sysval.
* commands, running UNIX:                UNIX commands.
* comment delimiters, changing:          Changecom.
* comments:                              Comments.
* comments, copied to output:            Changecom.
* comparing strings:                     Ifelse.
* compatibility:                         Compatibility.
* conditionals:                          Ifdef.
* controlling debugging output:          Debug Levels.
* counting loops:                        Loops.
* debugging output, controlling:         Debug Levels.
* debugging output, saving:              Debug Output.
* decrement operator:                    Incr.
* defining new macros:                   Definitions.
* definitions, displaying macro:         Dumpdef.
* deleting macros:                       Undefine.
* deleting whitespace in input:          Dnl.
* discarding diverted text:              Cleardiv.
* displaying macro definitions:          Dumpdef.
* diversion numbers:                     Divnum.
* diverted text, discarding:             Cleardiv.
* diverting output to files:             Divert.
* dumping into frozen file:              Frozen files.
* error messages, printing:              Errprint.
* evaluation, of integer expressions:    Eval.
* executing UNIX commands:               UNIX commands.
* exit code from UNIX commands:          Sysval.
* exiting from m4:                       M4exit.
* expansion of macros:                   Macro expansion.
* expansion, tracing macro:              Trace.
* expressions, evaluation of integer:    Eval.
* extracting substrings:                 Substr.
* fast loading of frozen files:          Frozen files.
* file inclusion <1>:                    Undivert.
* file inclusion:                        File Inclusion.
* file names, on the command line:       Invoking m4.
* files, diverting output to:            Divert.
* files, names of temporary:             Maketemp.
* forloops:                              Loops.
* formatted output:                      Format.
* frozen files for fast loading:         Frozen files.
* GNU extensions <1>:                    Extensions.
* GNU extensions <2>:                    Frozen files.
* GNU extensions <3>:                    Esyscmd.
* GNU extensions <4>:                    Format.
* GNU extensions <5>:                    Patsubst.
* GNU extensions <6>:                    Regexp.
* GNU extensions <7>:                    Undivert.
* GNU extensions <8>:                    Search Path.
* GNU extensions <9>:                    Changesyntax.
* GNU extensions <10>:                   Debug Output.
* GNU extensions <11>:                   Debug Levels.
* GNU extensions <12>:                   Symbols.
* GNU extensions <13>:                   Builtin.
* GNU extensions <14>:                   Indir.
* GNU extensions:                        Arguments.
* included files, search path for:       Search Path.
* inclusion, of files <1>:               Undivert.
* inclusion, of files:                   File Inclusion.
* increment operator:                    Incr.
* indirect call of builtins:             Builtin.
* indirect call of macros:               Indir.
* initialization, frozen states:         Frozen files.
* input tokens:                          Syntax.
* input, lexical structure of the:       Changesyntax.
* input, saving:                         M4wrap.
* integer arithmetic:                    Arithmetic.
* integer expression evaluation:         Eval.
* length of strings:                     Len.
* lexical structure of the input:        Changesyntax.
* lexical structure of words:            Changeword.
* local variables:                       Pushdef.
* loops:                                 Loops.
* loops, counting:                       Loops.
* macro definitions, on the command line: Invoking m4.
* macro expansion, tracing:              Trace.
* macro invocation:                      Invocation.
* macro names:                           Symbols.
* macros, arguments to <1>:              Arguments.
* macros, arguments to:                  Macro Arguments.
* macros, displaying definitions:        Dumpdef.
* macros, expansion of:                  Macro expansion.
* macros, how to define new:             Definitions.
* macros, how to delete:                 Undefine.
* macros, how to rename:                 Defn.
* macros, indirect call of:              Indir.
* macros, quoted arguments to:           Quoting Arguments.
* macros, recursive:                     Loops.
* macros, special arguments to:          Pseudo Arguments.
* macros, temporary redefinition of:     Pushdef.
* messages, printing error:              Errprint.
* multibranches:                         Ifelse.
* names:                                 Names.
* options, command line:                 Invoking m4.
* output, diverting to files:            Divert.
* output, formatted:                     Format.
* output, saving debugging:              Debug Output.
* pattern substitution:                  Patsubst.
* printing error messages:               Errprint.
* quote delimiters, changing the:        Changequote.
* quoted macro arguments:                Quoting Arguments.
* quoted string:                         Quoted strings.
* recursive macros:                      Loops.
* redefinition of macros, temporary:     Pushdef.
* regular expressions <1>:               Patsubst.
* regular expressions:                   Regexp.
* reloading a frozen file:               Frozen files.
* renaming macros:                       Defn.
* running UNIX commands:                 UNIX commands.
* saving debugging output:               Debug Output.
* saving input:                          M4wrap.
* search path for included files:        Search Path.
* special arguments to macros:           Pseudo Arguments.
* strings, length of:                    Len.
* substitution by regular expression:    Patsubst.
* substrings, extracting:                Substr.
* syntax table:                          Changesyntax.
* temporary file names:                  Maketemp.
* temporary redefinition of macros:      Pushdef.
* Toggling sync lines within m4:         Syncoutput.
* tokens:                                Syntax.
* tracing macro expansion:               Trace.
* translating characters:                Translit.
* undefining macros:                     Undefine.
* UNIX commands, exit code from:         Sysval.
* UNIX commands, running:                UNIX commands.
* variables, local:                      Pushdef.
* words, lexical structure of:           Changeword.


File: m4.info,  Node: Macro index,  Prev: Concept index,  Up: Top

Macro index
***********

   References are exclusively to the places where a builtin is
introduced the first time.  Names starting and ending with `__' have
these characters removed in the index.

* Menu:

* builtin:                               Builtin.
* changecom:                             Changecom.
* changequote:                           Changequote.
* changesyntax:                          Changesyntax.
* changeword:                            Changeword.
* debugfile:                             Debug Output.
* debugmode:                             Debug Levels.
* decr:                                  Incr.
* define:                                Define.
* defn:                                  Defn.
* divert:                                Divert.
* divnum:                                Divnum.
* dnl:                                   Dnl.
* dumpdef:                               Dumpdef.
* errprint:                              Errprint.
* esyscmd:                               Esyscmd.
* eval:                                  Eval.
* file:                                  Errprint.
* format:                                Format.
* gnu:                                   Other Incompat.
* ifdef:                                 Ifdef.
* ifelse:                                Ifelse.
* include:                               Include.
* incr:                                  Incr.
* index:                                 Index.
* indir:                                 Indir.
* len:                                   Len.
* line:                                  Errprint.
* m4exit:                                M4exit.
* m4wrap:                                M4wrap.
* maketemp:                              Maketemp.
* patsubst:                              Patsubst.
* popdef:                                Pushdef.
* pushdef:                               Pushdef.
* regexp:                                Regexp.
* shift:                                 Loops.
* sinclude:                              Include.
* substr:                                Substr.
* symbols:                               Symbols.
* syncoutput:                            Syncoutput.
* syscmd:                                Syscmd.
* sysval:                                Sysval.
* traceoff:                              Trace.
* traceon:                               Trace.
* translit:                              Translit.
* undefine:                              Undefine.
* undivert:                              Undivert.
* unix:                                  Other Incompat.


