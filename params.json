{"name":"M4","tagline":"Mirror of git://git.savannah.gnu.org/m4.git","body":"GNU `m4' is an implementation of the traditional Unix macro\r\nprocessor.  It is mostly SVR4 compatible, although it has some\r\nextensions (for example, handling more than 9 positional parameters\r\nto macros).  `m4' also has builtin functions for including files,\r\nrunning shell commands, doing arithmetic, etc.  Autoconf needs GNU\r\n`m4' for generating `configure' scripts, but not for running them.\r\n\r\nGNU `m4' was originally written by Rene' Seindal, from Denmark.\r\n\r\nGNU `m4' has a web site at http://www.gnu.org/software/m4/.\r\n\r\nIf GNU `m4' is meant to serve GNU `autoconf', beware that `m4'\r\nshould be fully installed *prior to* configuring `autoconf' itself.\r\nLikewise, if you intend on hacking GNU `m4' from git, the bootstrap\r\nprocess requires that you first install a released copy of GNU `m4'.\r\n\r\nIf you are just trying to build `m4' from a released tarball, you\r\nshould not normally need to run `./bootstrap' or `autoreconf'; just go\r\nahead and start with `./configure'.  If you are trying to build `m4'\r\nfrom git, more information can be found in the version-control-only\r\nfile HACKING.\r\n\r\nIn the subdirectories `tests' and `examples' you will find various m4\r\nfiles, ranging from trivial test files to rather advanced macros.  If\r\nyou intend to use m4 seriously, you might find useful material down\r\nthere.\r\n\r\nSee file `COPYING' for copying conditions.\r\nSee file `INSTALL' for compilation and installation instructions.\r\nSee file `ABOUT-NLS' for how to customize this program to your language.\r\nSee file `NEWS' for a list of major changes in the current release.\r\nSee file `AUTHORS' for the names of maintainers.\r\nSee file `THANKS' for a list of contributors.\r\n\r\nBy using `./configure --with-gmp, you get multiple precision integral\r\nand rational arithmetic using mpeval.  The implementation depends on the\r\nGNU gmp v2 library.\r\n\r\nBy using `./configure --with-modules=`foo bar baz', you get an m4 with only\r\nthe named modules preloaded.  The default modules (preloaded if you do not\r\nuse this option) are sufficient to do the job of GNU m4-1.4.  Additional\r\nmodules may be desirable, or necessary if libltdl does not support your\r\nhost architecture.  The implementation uses libltdl interface, details of\r\nwhich are in the libtool manual.  See file `modules/README' for a more\r\ndetailed description.\r\n\r\nBy default, the `syscmd' and `esyscmd' macros try to use the first\r\ninstance of `sh' found by `command -p getconf PATH' at configure time,\r\nwith a default of `/bin/sh'.  If that default is inappropriate, you\r\ncan use `./configure --with-syscmd-shell=location' to specify the\r\nshell to use.\r\n\r\nBy using `./configure --with-dmalloc', GNU m4 is linked with Gray\r\nWatson's dmalloc package.  It is a debugging option for finding memory\r\nmanagement problems.  Gray Watson's dmalloc package is available at\r\nftp://ftp.letters.com/src/dmalloc/dmalloc.tar.gz.\r\n\r\nGNU M4 uses GNU Libtool in order to build shared libraries on a\r\nvariety of systems.  While this is very nice for making usable\r\nbinaries, it can be a pain when trying to debug a program. For that\r\nreason, compilation of shared libraries can be turned off by\r\nspecifying the `--disable-shared' option to `configure'.  However,\r\nwithout shared libraries, modules that are not preloaded will not be\r\navailable for use.\r\n\r\nSend bug reports, comments or ideas to `bug-m4@gnu.org'.  A bug report\r\nis an adequate description of the problem: your input, what you\r\nexpected, what you got, and why this is wrong.  Diffs are welcome, but\r\nthey only describe a solution, from which the problem might be uneasy to\r\ninfer.  Don't forget all relevant information about your operating\r\nsystem, compiler, libraries, ...\r\n\r\nThe easiest way to remember this information is by using the\r\ntestsuite.  Any test failures are automatically logged, along with\r\nlots of useful information about your setup; simply mailing\r\ntests/testsuite.log to `bug-m4@gnu.org' is a good start.  If you want\r\nto dive in and debug a failure, you may find it useful to fine-tune\r\nthe execution of the testsuite.  For example, running test 12 in\r\nverbose mode can be done with:\r\n\r\nmake check TESTSUITEFLAGS='-v -d -x 12'\r\n\r\nThe testsuite understands --help to tell you more about the current\r\nset of tests.\r\n\r\n========================================================================\r\n\r\nCopyright (C) 2000, 2005, 2006, 2007, 2009, 2010 Free Software\r\nFoundation, Inc.\r\n\r\nPermission is granted to copy, distribute and/or modify this document\r\nunder the terms of the GNU Free Documentation License, Version 1.3 or\r\nany later version published by the Free Software Foundation; with no\r\nInvariant Sections, with no Front-Cover Texts, and with no Back-Cover\r\nTexts.  A copy of the license is included in the ``GNU Free\r\nDocumentation License'' file as part of this distribution.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}