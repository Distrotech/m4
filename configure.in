# Configure template for GNU m4.
# Copyright (C) 1991-2000 Free Software Foundation, Inc.
# Process this file with autoconf to produce a configure script.

undefine([changeword])

AC_INIT(src/m4.c)
AM_CONFIG_HEADER(config.h)
AC_ARG_PROGRAM

AM_INIT_AUTOMAKE(m4,1.4p)

ALL_LINGUAS="cs de el fr it ja nl pl ru sv"

pkglibexecdir='${libexecdir}'/$PACKAGE
AC_SUBST(pkglibexecdir)

AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PATH_PROG(PERL,perl)

AC_AIX
AC_ISC_POSIX
AC_MINIX
AC_EXEEXT
AM_C_PROTOTYPES
AC_C_CONST

AM_ENABLE_SHARED
AM_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL

AC_LIB_LTDL

AC_CHECK_HEADERS(limits.h locale.h memory.h siginfo.h string.h unistd.h)
AC_HEADER_STDC
AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

LIBM4_DLL_IMPORT=
case "$host" in
*-*-cygwin* | *-*-mingw* | *-*-os2)
  if test "X$enable_shared" = Xyes; then
    LIBM4_DLL_IMPORT=-DLIBM4_DLL_IMPORT
  fi
  ;;
esac
AC_SUBST(LIBM4_DLL_IMPORT)

AC_CHECK_FUNCS(bzero calloc mkstemp sigaction sigaltstack sigstack sigvec strerror tmpfile)

AC_FUNC_ALLOCA
AC_FUNC_VPRINTF
AC_REPLACE_FUNCS(strtol xmalloc xstrdup)

M4OBJS=
AC_CHECK_FUNC(getopt_long, private_getopt=:, private_getopt=false)
if $private_getopt; then
  AC_LINK_FILES(src/getopt-h.in, src/getopt.h)
  M4OBJS="getopt1.o getopt.o"
fi
AC_SUBST(M4OBJS)
jm_PREREQ_ERROR

AC_MSG_CHECKING(ecvt declaration)
AC_EGREP_HEADER(ecvt, stdlib.h,
  [AC_MSG_RESULT(yes); AC_DEFINE(HAVE_EFGCVT, 2,
[Define to 1 if you have ecvt(3), fcvt(3) and gcvt(3), define to 2 if
   these are declared in <stdlib.h>.])],
  [AC_MSG_RESULT(no); AC_CHECK_FUNCS(ecvt)])

AC_MSG_CHECKING(if stack overflow is detectable)
# Code from Jim Avera <jima@netcom.com>.
# stackovf.c requires:
#  1. Either sigaction with SA_ONSTACK, or sigvec with SV_ONSTACK
#  2. Either sigaltstack or sigstack
#  3. getrlimit, including support for RLIMIT_STACK
use_stackovf=no
if test "$ac_cv_func_sigaction" = yes || test "$ac_cv_func_sigvec" = yes; then
  if test "$ac_cv_func_sigaltstack" = yes || test "$ac_cv_func_sigstack" = yes; then
    AC_TRY_LINK([#include <sys/time.h>
#include <sys/resource.h>
#include <signal.h>],
      [struct rlimit r; int i; getrlimit (RLIMIT_STACK, &r)
#if (!defined(HAVE_SIGACTION) || !defined(SA_ONSTACK)) \
    && (!defined(HAVE_SIGVEC) || !defined(SV_ONSTACK))
choke me		/* SA_ONSTACK and/or SV_ONSTACK are not defined */
#endif],
      use_stackovf=yes)
  fi
fi
AC_MSG_RESULT($use_stackovf)
if test "$use_stackovf" = yes; then
  AC_DEFINE(USE_STACKOVF, 1, [Define to 1 if using stack overflow detection.])
  STACKOVF=stackovf.${U}o
  AC_SUBST(STACKOVF)
  AC_EGREP_HEADER(rlim_t, sys/resource.h, ,
	AC_DEFINE(rlim_t, int,
	[Define to int if rlim_t is not defined in <sys/resource.h>.]))
  AC_EGREP_HEADER(stack_t, signal.h, ,
	AC_DEFINE(stack_t, struct sigaltstack,
	[Define to struct sigaltstack if stack_t is not defined in <sys/signal.h>.]))
  AC_EGREP_HEADER(sigcontext, signal.h, 
	AC_DEFINE(HAVE_SIGCONTEXT, 1,
	[Define to 1 if <signal.h> declares sigcontext.]))
  AC_EGREP_HEADER(siginfo_t, signal.h,
		  AC_DEFINE(HAVE_SIGINFO_T, 1,
	[Define to 1 if <signal.h> declares siginfo_t.]))

  AC_TRY_COMPILE([#include <signal.h>],
	    [struct sigaltstack x; x.ss_base = 0;],
	    AC_DEFINE(ss_sp, ss_base,
	    [Define to ss_base if stack_t has ss_base instead of ss_sp.]))
fi

AC_MSG_CHECKING(if changeword is wanted)
AC_ARG_ENABLE(changeword,
[  --enable-changeword     enable -W and changeword() builtin],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(ENABLE_CHANGEWORD, 1,
  [Define to 1 if the changeword(REGEXP) functionality is required.])
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AC_MSG_CHECKING(if support for dynamic modules is wanted)
AC_ARG_WITH(modules,
[  --with-modules[=MODULES] add support for dynamic modules],
[use_modules="$withval"], [use_modules=no])
test -z "$use_modules" && use_modules=no
DLPREOPEN="-dlpreopen force"
if test "$use_modules" = no; then
  AC_MSG_RESULT(no)
else
  AC_MSG_RESULT(yes)
  if test "$use_modules" != yes; then
    DLPREOPEN=
    for module in $use_modules; do
      DLPREOPEN="$DLPREOPEN -dlopen ../modules/$module.la"
    done
  fi
fi
AC_SUBST(DLPREOPEN)
AM_CONDITIONAL(WITH_MODULES, test "$use_modules" != no)
test "$use_modules" != no && AC_DEFINE(WITH_MODULES, 1,
[Define this if you want dynamic module support]) 

dnl This is for the modules
AC_STRUCT_TM
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(getcwd gethostname mktime uname)
AC_CHECK_FUNCS(setenv unsetenv putenv clearenv)


AM_WITH_GMP

AM_WITH_DMALLOC
AM_GNU_GETTEXT

if test "$USE_INCLUDED_LIBINTL" = yes; then
  INTLINCL='-I$(top_srcdir)/intl'

  AC_SUBST(INTLINCL)
fi


dnl AC_LINK_FILES($nls_cv_header_libgt, $nls_cv_header_intl)

LTLIBOBJS=`echo "$LIBOBJS" | sed 's,.o ,.lo ,g;s,.o$,.lo,'`
AC_SUBST(LTLIBOBJS)

# This no-op line works around a bug in automake 1.4:
# it doesn't recognize the assignment to LIBOBJS
# in acm4/malloc.m4 and acm4/realloc.m4.
# : LIBOBJS="$LIBOBJS malloc.o realloc.o"

AC_OUTPUT(
Makefile
acm4/Makefile
intl/Makefile
po/Makefile.in
doc/Makefile
m4/Makefile
src/Makefile
modules/Makefile
tests/Makefile
examples/Makefile,
[sed -e "/POTFILES =/r po/POTFILES" po/Makefile.in > po/Makefile; \
sh $srcdir/tests/mkconfig.sh; \
test -z "$CONFIG_HEADERS" || echo timestamp > stamp-h.in])
