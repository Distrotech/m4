#! /bin/sh

# helps bootstrapping M4, when checked out from CVS
# requires GNU Gettext and bleeding edge GNU Autoconf, Automake & Libtool

: ${AUTORECONF=autoreconf}
: ${AWK=awk}
: ${GNULIB_TOOL=gnulib-tool}
: ${RM=rm -f}
: ${SED=sed}
: ${WGET=wget}

: ${DOWNLOAD_PO=yes}

ltdldir=ltdl
config_aux_dir=$ltdldir/config
config_macro_dir=$ltdldir/m4
bailout_cb=:

# List dependencies here too; we don't extract them, otherwise dependent
# modules could end up being imported to src/ *and* gnu/!
src_modules='getopt version-etc-fsf version-etc'

dirname="s,/[^/]*$,,"
basename="s,^.*/,,g"

# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh
# is ksh but when the shell is invoked as "sh" and the current value of
# the _XPG environment variable is not equal to 1 (one), the special
# positional parameter $0, within a function call, is the name of the
# function.
progpath="$0"

# The name of this program:
progname=`echo "$progpath" | $SED "$basename"`

# func_echo arg...
# Echo program name prefixed message.
func_echo ()
{
    echo $progname: ${1+"$@"}
}

# func_error arg...
# Echo program name prefixed message to standard error.
func_error ()
{
    echo $progname: ${1+"$@"} >&2
}


## ------------------------------ ##
## Fetch translations.            ##
## (taken from GNU tar bootstrap) ##
## ------------------------------ ##

TP_URL="http://www.iro.umontreal.ca/translation/maint/m4/"

func_update_po ()
{
    if test $# = 1; then
      case $1 in
	*.po)  POFILE=$1    ;;
	*)     POFILE=$1.po ;;
      esac
      func_echo "getting translation for $1..."
      $WGET -r --cache=off $TP_URL/$POFILE
    else
      func_echo "getting translations into po..."
      (cd po &&
       rm -f dummy `ls | sed -n '/\.gmo$/p; /\.po/p'` &&
	 $WGET -nv -nd -r -l 1 -A .po --cache=off $TP_URL &&
	 rm -f index.html index.html.[0-9]*
       ls *.po | sed 's/\.po$//' > LINGUAS
      ) || exit
    fi
}

case $DOWNLOAD_PO in
  no)   ;;
  only) func_update_po; exit 0 ;;
  yes)  func_update_po ;;
  *)    func_update_po $DOWNLOAD_PO ;;
esac

## ---------------------------- ##
## Find the gnulib module tree. ##
## ---------------------------- ##

case $GNULIB_TOOL in
    /*  )  gnulibdir=$GNULIB_TOOL ;;		# absolute
    */* )  gnulibdir=`pwd`/$GNULIB_TOOL ;;	# relative
    *   )  gnulibdir=`which "$GNULIB_TOOL"` ;;	# PATH search
esac

# Follow symlinks
while test -h "$gnulibdir"; do

    # Resolve symbolic link.
    sedexpr1='s, -> ,#%%#,'
    sedexpr2='s,^.*#%%#\(.*\)$,\1,p'
    linkval=`LC_ALL=C ls -l "$gnulibdir" | $SED "$sedexpr1" | $SED -n "$sedexpr2"`
    test -n "$linkval" || break

    case "$linkval" in
	/* ) gnulibdir="$linkval" ;;
	* )  gnulibdir=`echo "$gnulibdir" | sed -e 's,/[^/]*$,,'`/"$linkval" ;;
    esac

done

gnulibdir=`echo "$gnulibdir" | $SED "$dirname"`


## ---------------------- ##
## Import Gnulib modules. ##
## ---------------------- ##

func_echo "running: ${GNULIB_TOOL} --update"
${GNULIB_TOOL} --update

func_echo "patching include directories in gnulib regex module"
mv $config_macro_dir/regex.m4 $config_macro_dir/regex-m4.old
sed 's,lib/regex.c,gnu/regex.c,g' $config_macro_dir/regex-m4.old > $config_macro_dir/regex.m4 && \
  $RM $config_macro_dir/regex-m4.old

func_echo "hiding gnulib jm_\* macros"
cat >> $config_macro_dir/gnulib.m4 <<\EOF
AC_DEFUN([gl_AC_HEADER_INTTYPES_H], [jm_AC_HEADER_INTTYPES_H])
AC_DEFUN([gl_AC_HEADER_STDINT_H], [jm_AC_HEADER_STDINT_H])
AC_DEFUN([gl_AC_TYPE_UINTMAX_T], [jm_AC_TYPE_UINTMAX_T])
EOF


## --------------------------------- ##
## Copy additional src only modules. ##
## --------------------------------- ##

func_echo "fetching modules for src directory"

for file in `${GNULIB_TOOL} --extract-filelist $src_modules`; do

    dest=`echo $file | $SED "$basename"`
    case $file in
	lib/*) dest=src/$dest ;;
	m4/*)  dest=$config_macro_dir/$dest ;;
	*)     func_echo "Unknown file: $file"
	       exit 1
	       ;;
    esac

    # Be sure to show all copying errors before bailing out
    if test -f $gnulibdir/$file; then
	func_echo "copying file \`$dest'"
	cp $gnulibdir/$file $dest
    else
	func_error "$gnulibdir/$file does not exist"
	bailout_cb="exit 1"
    fi
done
$bailout_cb


## ----------- ##
## Autoreconf. ##
## ----------- ##

func_echo "running: $AUTORECONF --force --verbose --install --no-recursive"
$AUTORECONF --force --verbose --install --no-recursive


## ---------- ##
## testsuite. ##
## ---------- ##

(
  func_echo "generating testsuite"
  cd tests
  $AWK -f ./generate.awk ../doc/m4.texinfo > generated.at
)

if test x"$DOWNLOAD_PO" != xno; then
  func_echo "If your pofiles are uptodate, you can rerun bootstrap"
  func_echo "as \`DOWNLOAD_PO=no $progname' to avoid redownloading."
fi

exit 0
