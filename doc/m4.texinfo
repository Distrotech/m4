\input texinfo @c -*- texinfo -*-
@comment ========================================================
@comment %**start of header
@setfilename m4.info
@settitle GNU M4 macro processor
@setchapternewpage odd
@ifnothtml
@setcontentsaftertitlepage
@end ifnothtml
@finalout

@include version.texi

@set beta

@c @tabchar{}
@c ----------
@c The testsuite expects literal tab output in some examples, but
@c literal tabs in texinfo lead to formatting issues.
@macro tabchar
@	@c
@end macro

@c @ovar{ARG}
@c -------------------
@c The ARG is an optional argument.  To be used for macro arguments in
@c their documentation.
@macro ovar{varname}
@r{[}@var{\varname\}@r{]}
@end macro

@c @dvar{ARG, DEFAULT}
@c -------------------
@c The ARG is an optional argument, defaulting to DEFAULT.  To be used
@c for macro arguments in their documentation.
@macro dvar{varname, default}
@r{[}@var{\varname\} = @samp{\default\}@r{]}
@end macro

@comment %**end of header
@comment ========================================================

@copying

This manual is for @acronym{GNU} M4 (version @value{VERSION}, @value{UPDATED}),
a package containing an implementation of the m4 macro language.

Copyright @copyright{} 1989, 1990, 1991, 1992, 1993, 1994, 1998, 1999,
2000, 2001, 2004, 2005, 2006 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @acronym{GNU} Free Documentation License,
Version 1.2 or any later version published by the Free Software
Foundation; with no Invariant Sections, no Front-Cover Texts, and no
Back-Cover Texts.  A copy of the license is included in the section
entitled ``@acronym{GNU} Free Documentation License.''
@end quotation
@end copying

@dircategory GNU programming tools
@direntry
* M4: (m4).                     A powerful macro processor.
@end direntry

@titlepage
@title GNU M4, version @value{VERSION}
@subtitle A powerful macro processor
@subtitle Edition @value{EDITION}, @value{UPDATED}
@author by Ren@'e Seindal
@author and Gary V. Vaughan

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top GNU M4
@insertcopying
@end ifnottex

@acronym{GNU} @code{m4} is an implementation of the traditional UNIX macro
processor.  It is mostly SVR4 compatible, although it has some
extensions (for example, handling more than 9 positional parameters
to macros).  @code{m4} also has builtin functions for including
files, running shell commands, doing arithmetic, etc.  Autoconf needs
@acronym{GNU} @code{m4} for generating @file{configure} scripts, but not for
running them.

@acronym{GNU} @code{m4} was originally written by Ren@'e Seindal, with
subsequent changes by Fran@,{c}ois Pinard and other volunteers
on the Internet.  All names and email addresses can be found in the
files @file{AUTHORS} and @file{THANKS} from the @acronym{GNU} M4 distribution.

@ifclear beta
This is release @value{VERSION}.  It is now to be considered stable,
future releases on this branch are only meant to fix bugs, increase
speed, or improve documentation.
@end ifclear

@ifset beta
This is BETA release @value{VERSION}.  This is a development release,
and as such, is prone to bugs, crashes, unforeseen features, incomplete
documentation@dots{}, therefore, use at your own peril.  In case of
problems, please do not hesitate to report them (see the @file{README}
file in the distribution).  @xref{Experiments}.
@end ifset

@menu
* Preliminaries::               Introduction and preliminaries
* Syntax::                      Lexical and syntactic conventions

* Macros::                      How to invoke macros
* Definitions::                 How to define new macros
* Conditionals::                Conditionals, loops, and recursion

* Debugging::                   How to debug macros and input

* Input Control::               Input control
* File Inclusion::              File inclusion
* Diversions::                  Diverting and undiverting output

* Modules::                     Extending M4 with dynamic runtime modules

* Text handling::               Macros for text handling
* Arithmetic::                  Macros for doing arithmetic
* Shell commands::              Macros for running shell commands
* Miscellaneous::               Miscellaneous builtin macros
* Frozen files::                Fast loading of frozen state

* Compatibility::               Compatibility with other versions of @code{m4}
* Answers::                     Correct version of some examples
* Copying This Manual::         How to make copies of this manual
* Indices::                     Indices of concepts and macros

@detailmenu
 --- The Detailed Node Listing ---

Introduction and preliminaries

* Intro::                       Introduction to @code{m4}
* History::                     Historical references
* Invoking m4::                 Invoking @code{m4}
* Bugs::                        Problems and bugs
* Manual::                      Using this manual

Lexical and syntactic conventions

* Names::                       Macro names
* Quoted strings::              Quoting input to @code{m4}
* Comments::                    Comments in @code{m4} input
* Other tokens::                Other kinds of input tokens
* Input processing::            How @code{m4} copies input to output
* Regular expression syntax::   How @code{m4} interprets regular expressions

How to invoke macros

* Invocation::                  Macro invocation
* Inhibiting Invocation::       Preventing macro invocation
* Macro Arguments::             Macro arguments
* Quoting Arguments::           On Quoting Arguments to macros
* Macro expansion::             Expanding macros

How to define new macros

* Define::                      Defining a new macro
* Arguments::                   Arguments to macros
* Pseudo Arguments::            Special arguments to macros
* Undefine::                    Deleting a macro
* Defn::                        Renaming macros
* Pushdef::                     Temporarily redefining macros
* Renamesyms::                  Renaming macros with regular expressions

* Indir::                       Indirect call of macros
* Builtin::                     Indirect call of builtins
* M4symbols::                   Getting the defined macro names

Conditionals, loops, and recursion

* Ifdef::                       Testing if a macro is defined
* Ifelse::                      If-else construct, or multibranch
* Shift::                       Recursion in @code{m4}
* Forloop::                     Iteration by counting
* Foreach::                     Iteration by list contents

How to debug macros and input

* Dumpdef::                     Displaying macro definitions
* Trace::                       Tracing macro calls
* Debug Levels::                Controlling debugging output
* Debug Output::                Saving debugging output

Input control

* Dnl::                         Deleting whitespace in input
* Changequote::                 Changing the quote characters
* Changecom::                   Changing the comment delimiters
* Changeresyntax::              Changing the regular expression syntax
* Changesyntax::                Changing the lexical structure of the input
* M4wrap::                      Saving text until end of input

File inclusion

* Include::                     Including named files
* Search Path::                 Searching for include files

Diverting and undiverting output

* Divert::                      Diverting output
* Undivert::                    Undiverting output
* Divnum::                      Diversion numbers
* Cleardiv::                    Discarding diverted text

Extending M4 with dynamic runtime modules

* M4modules::                   Listing loaded modules
* Load::                        Loading additional modules
* Unload::                      Removing loaded modules
* Standard Modules::            Standard bundled modules

Macros for text handling

* Len::                         Calculating length of strings
* Index macro::                 Searching for substrings
* Regexp::                      Searching for regular expressions
* Substr::                      Extracting substrings
* Translit::                    Translating characters
* Patsubst::                    Substituting text by regular expression
* Format::                      Formatting strings (printf-like)

Macros for doing arithmetic

* Incr::                        Decrement and increment operators
* Eval::                        Evaluating integer expressions
* Mpeval::                      Multiple precision arithmetic

Macros for running shell commands

* Platform macros::             Determining the platform
* Syscmd::                      Executing simple commands
* Esyscmd::                     Reading the output of commands
* Sysval::                      Exit status
* Maketemp::                    Making temporary files

Miscellaneous builtin macros

* Errprint::                    Printing error messages
* Location::                    Printing current location
* M4exit::                      Exiting from @code{m4}
* Syncoutput::                  Turning on and off sync lines

Fast loading of frozen state

* Using frozen files::          Using frozen files
* Frozen file format 1::        Frozen file format 1
* Frozen file format 2::        Frozen file format 2

Compatibility with other versions of @code{m4}

* Extensions::                  Extensions in @acronym{GNU} M4
* Incompatibilities::           Other incompatibilities
* Experiments::                 Experimental features in @acronym{GNU} M4

How to make copies of this manual

* GNU Free Documentation License::  License for copying this manual

Indices of concepts and macros

* Concept index::               Index for many concepts
* Macro index::                 Index for all @code{m4} macros

@end detailmenu
@end menu

@node Preliminaries
@chapter Introduction and preliminaries

This first chapter explains what @acronym{GNU} @code{m4} is, where @code{m4}
comes from, how to read and use this documentation, how to call the
@code{m4} program, and how to report bugs about it.  It concludes by
giving tips for reading the remainder of the manual.

The following chapters then detail all the features of the @code{m4}
language, as shipped in the @acronym{GNU} M4 package.

@menu
* Intro::                       Introduction to @code{m4}
* History::                     Historical references
* Invoking m4::                 Invoking @code{m4}
* Bugs::                        Problems and bugs
* Manual::                      Using this manual
@end menu

@node Intro
@section Introduction to @code{m4}

@code{m4} is a macro processor, in the sense that it copies its
input to the output, expanding macros as it goes.  Macros are either
builtin or user-defined, and can take any number of arguments.
Besides just doing macro expansion, @code{m4} has builtin functions
for including named files, running shell commands, doing integer
arithmetic, manipulating text in various ways, performing recursion,
etc.@dots{}  @code{m4} can be used either as a front-end to a compiler,
or as a macro processor in its own right.

The @code{m4} macro processor is widely available on all UNIXes, and has
been standardized by @acronym{POSIX}.
Usually, only a small percentage of users are aware of its existence.
However, those who find it often become committed users.  The
popularity of @acronym{GNU} Autoconf, which requires @acronym{GNU}
@code{m4} for @emph{generating} @file{configure} scripts, is an incentive
for many to install it, while these people will not themselves
program in @code{m4}.  @acronym{GNU} @code{m4} is mostly compatible with the
System V, Release 3 version, except for some minor differences.
@xref{Compatibility}, for more details.

Some people find @code{m4} to be fairly addictive.  They first use
@code{m4} for simple problems, then take bigger and bigger challenges,
learning how to write complex sets of @code{m4} macros along the way.
Once really addicted, users pursue writing of sophisticated @code{m4}
applications even to solve simple problems, devoting more time
debugging their @code{m4} scripts than doing real work.  Beware that
@code{m4} may be dangerous for the health of compulsive programmers.

@node History
@section Historical references

@code{GPM} was an important ancestor of @code{m4}.  See
C. Stratchey: ``A General Purpose Macro generator'', Computer Journal
8,3 (1965), pp. 225 ff.  @code{GPM} is also succinctly described into
David Gries classic ``Compiler Construction for Digital Computers''.

The classic B. Kernighan and P.J. Plauger: ``Software Tools'',
Addison-Wesley, Inc. (1976) describes and implements a Unix
macro-processor language, which inspired Dennis Ritchie to write
@code{m3}, a macro processor for the AP-3 minicomputer.

Kernighan and Ritchie then joined forces to develop the original
@code{m4}, as described in ``The M4 Macro Processor'', Bell
Laboratories (1977).  It had only 21 builtin macros.

While @code{GPM} was more @emph{pure}, @code{m4} is meant to deal with
the true intricacies of real life: macros can be recognized without
being pre-announced, skipping whitespace or end-of-lines is easier,
more constructs are builtin instead of derived, etc.

Originally, the Kernighan and Plauger macro-processor, and then
@code{m3}, formed the engine for the Rational FORTRAN preprocessor,
that is, the @code{Ratfor} equivalent of @code{cpp}.  Later, @code{m4}
was used as a frontend for @code{Ratfor}, @code{C} and @code{Cobol}.

Ren@'e Seindal released his implementation of @code{m4}, @acronym{GNU}
@code{m4},
in 1990, with the aim of removing the artificial limitations in many
of the traditional @code{m4} implementations, such as maximum line
length, macro size, or number of macros.

The late Professor A. Dain Samples described and implemented a further
evolution in the form of @code{M5}: ``User's Guide to the M5 Macro
Language: 2nd edition'', Electronic Announcement on comp.compilers
newsgroup (1992).

Fran@,{c}ois Pinard took over maintenance of @acronym{GNU} @code{m4} in
1992, until 1994 when he released @acronym{GNU} @code{m4} 1.4, which was
the stable release for 10 years.  It was at this time that @acronym{GNU}
Autoconf decided to require @acronym{GNU} @code{m4} as its underlying
engine, since all other implementations of @code{m4} had too many
limitations.

More recently, in 2004, Paul Eggert released 1.4.1 and 1.4.2 which
addressed some long standing bugs in the venerable 1.4 release.
Then in 2005 Gary V. Vaughan collected together the many
patches to @acronym{GNU} @code{m4} 1.4 that were floating around the net and
released 1.4.3 and 1.4.4.  And in 2006, Eric Blake joined the team and
prepared patches for the release of 1.4.5, 1.4.6, and 1.4.7.

Meanwhile, development was underway for new features for @code{m4},
such as dynamic module loading and additional builtins, practically
rewriting the entire code base.  This development has spurred
improvements to other @acronym{GNU} software, such as @acronym{GNU}
Libtool.  @acronym{GNU} M4 2.0 is the result of this effort.

@node Invoking m4
@section Invoking @code{m4}

The format of the @code{m4} command is:

@comment ignore
@example
@code{m4} @r{[}@var{option}@dots{}@r{]} @r{[}@var{file}@dots{}@r{]}
@end example

@cindex command line, options
@cindex options, command line
@cindex @env{POSIXLY_CORRECT}
All options begin with @samp{-}, or if long option names are used, with
@samp{--}.  A long option name need not be written completely, any
unambiguous prefix is sufficient.  Unless @env{POSIXLY_CORRECT} is set
in the environment, options may be intermixed with files.  The argument
@option{--} is a marker to denote the end of options.

With short options, options that do not take arguments may be combined
into a single command line argument with subsequent options, options
with mandatory arguments may be provided either as a single command line
argument or as two arguments, and options with optional arguments must
be provided as a single argument.  In other words, without
@env{POSIXLY_CORRECT}, @kbd{m4 -QPDfoo -d a -d+f} is equivalent to
@kbd{m4 -Q -P -D foo -d -d+f -- a}, although the latter form is
considered canonical.  (With @env{POSIXLY_CORRECT}, it is equivalent to
@kbd{m4 -Q -P -D foo -d -- a ./-d+f}).

With long options, options with mandatory arguments may be provided with
an equal sign (@samp{=}) in a single argument, or as two arguments, and
options with optional arguments must be provided as a single argument.
In other words, @kbd{m4 --def foo --debug a} is equivalent to
@kbd{m4 --define=foo --debug= -- a}, although the latter form is
considered canonical (not to mention more robust, in case a future
version of @code{m4} introduces an option named @option{--default}).

@code{m4} understands the following options, grouped by functionality.
Several options control the overall operation of @code{m4}:

@table @code
@item --help
Print a help summary on standard output, then immediately exit
@code{m4} without reading any input files.

@item --version
Print the version number of the program on standard output, then
immediately exit @code{m4} without reading any input files.

@item -b
@itemx --batch
Makes this invocation of @code{m4} non-interactive.  This means that
output will be buffered, and interrupts will halt execution.  If neither
@option{-b} nor @option{-i} are specified, this is activated by default
when any input files are specified, or when either standard input or
standard error is not a terminal.  Note that this means that @kbd{m4}
alone might be interactive, but @kbd{m4 -} is not, even though both
commands process only standard input.  If both @option{-b} and
@option{-i} are specified, only the last one takes effect.

@item -c
@itemx --discard-comments
Discard all comments instead of copying them to the output.

@item -E
@itemx --fatal-warnings
Stop execution and exit @code{m4} once the first warning has been
issued, considering all of them to be fatal.

@item -i
@itemx --interactive
@itemx -e
Makes this invocation of @code{m4} interactive.  This means that all
output will be unbuffered, and interrupts will be ignored.  If neither
@option{-b} nor @option{-i} are specified, this is activated by default
when no input files are specified, and when both standard input and
standard error are terminals (similar to the way that /bin/sh determines
when to be interactive).  If both @option{-b} and @option{-i} are
specified, only the last one takes effect.  The spelling @option{-e}
exists for compatibility with other @code{m4} implementations, and
issues a warning because it may be withdrawn in a future version of
@acronym{GNU} M4.

@item -P
@itemx --prefix-builtins
Internally modify @emph{all} builtin macro names so they all start with
the prefix @samp{m4_}.  For example, using this option, one should write
@samp{m4_define} instead of @samp{define}, and @samp{m4___file__}
instead of @samp{__file__}.  This option has no effect if @option{-R}
is also specified.

@item -Q
@itemx --quiet
@itemx --silent
Suppress warnings, such as missing or superfluous arguments in macro
calls, or treating the empty string as zero.  Error messages are still
printed.  The distinction between error and warning is fuzzy, and if
you encounter a situation where the message output did not match your
expectations, please report that as a bug.

@item -r @var{RESYNTAX-SPEC}
@itemx --regexp-syntax=@var{RESYNTAX-SPEC}
Set the regular expression syntax according to @var{RESYNTAX-SPEC}.
When this option is not given, @acronym{GNU} M4 uses emacs compatible
regular expressions.  @xref{Changeresyntax}, for more details on the
format and meaning of @var{RESYNTAX-SPEC}.

@item --safer
Cripple the builtins @code{maketemp} (@pxref{Maketemp}),
@code{debugfile} (@pxref{Debug Output}), @code{syscmd} (@pxref{Syscmd}),
and @code{esyscmd} (@pxref{Esyscmd}), since they can perform potentially
unsafe actions.  An attempt to use these macros will result in an error.
This option is intended to make it safer to preprocess an input file of
unknown origin.
@end table

On platforms that support dynamic libraries, there are some options
that affect dynamic loading.

@table @code
@item -M @var{DIRECTORY}
@itemx --module-directory=@var{DIRECTORY}
Specify an alternate @var{DIRECTORY} to search for modules.  This option
can be used multiple times to add several different directories to the
module search path.  @xref{Modules}, for more details.

@item -m @var{MODULE}
@itemx --load-module=@var{MODULE}
Load @var{MODULE} before parsing input files.  @var{MODULE} is searched
for in each directory of the module search path, until the first match
is found or the list is exhausted.  @xref{Modules}, for more details.
By default, the modules @samp{m4}, @samp{traditional}, and @samp{gnu}
are preloaded, although this can be controlled during configuration
with the @option{--with-modules} option to @file{configure}.
@end table

@cindex macro definitions, on the command line
@cindex command line, macro definitions on the
Several options allow @code{m4} to behave more like a preprocessor.
Macro definitions and deletions can be made on the command line, the
search path can be altered, and the output file can track where the
input came from.  These features occur with the following options:

@table @code
@item --import-environment
Imports every variable in the environment as a macro.  This is done
before @option{-D} and @option{-U}, so they can override the
environment.

@item -B @var{DIRECTORY}
@itemx --prepend-include=@var{DIRECTORY}
Make @code{m4} search @var{DIRECTORY} for included files, prior to
searching the current working directory.  @xref{Search Path}, for more
details.  This option may be given more than once.  Some other
implementations of @code{m4} use @code{-B @var{number}} to change their
hard-coded limits, but that is unnecessary in @acronym{GNU} where the
only limit is your hardware capability.  So although it is unlikely that
you will want to include a relative directory whose name is purely
numeric, @acronym{GNU} @code{m4} will warn you about this potential
compatibility issue; you can avoid the warning by using the long
spelling, or by using @samp{./@var{number}} if you really meant it.

@item -D @var{NAME}@r{[}=@var{VALUE}@r{]}
@itemx --define=@var{NAME}@r{[}=@var{VALUE}@r{]}
This enters @var{NAME} into the symbol table, before any input files are
read.  If @samp{=@var{VALUE}} is missing, the value is taken to be the
empty string.  The @var{VALUE} can be any string, and the macro can be
defined to take arguments, just as if it was defined from within the
input.  This option may be given more than once; order is significant,
and redefining the same @var{NAME} loses the previous value.

@item -I @var{DIRECTORY}
@itemx --include=@var{DIRECTORY}
Make @code{m4} search @var{DIRECTORY} for included files that are not
found in the current working directory.  @xref{Search Path}, for more
details.  This option may be given more than once.

@item -s
@itemx --synclines
Generate synchronization lines, for use by the C preprocessor or other
similar tools.  This is useful, for example, when @code{m4} is used as a
front end to a compiler.  Source file name and line number information
is conveyed by directives of the form @samp{#line @var{linenum}
"@var{file}"}, which are inserted as needed into the middle of the
output.  Such directives mean that the following line originated or was
expanded from the contents of input file @var{file} at line
@var{linenum}.  The @samp{"@var{file}"} part is often omitted when
the file name did not change from the previous directive.

Synchronization directives are always given on complete lines by
themselves.  When a synchronization discrepancy occurs in the middle of
an output line, the associated synchronization directive is delayed
until the beginning of the next generated line.  @xref{Syncoutput}, for
runtime control.

@item -U @var{NAME}
@itemx --undefine=@var{NAME}
This deletes any predefined meaning @var{NAME} might have.  Obviously,
only predefined macros can be deleted in this way.  This option may be
given more than once; undefining a @var{NAME} that does not have a
definition is silently ignored.
@end table

There are some limits within @code{m4} that can be tuned.  For
compatibility, @code{m4} also accepts some options that control limits
in other implementations, but which are automatically unbounded (limited
only by your hardware constraints) in @acronym{GNU} @code{m4}.

@table @code
@comment FIXME - clean this up.  POSIXLY_CORRECT should imply -G (as
@comment well as -Q), such that POSIX and traditional are identical.
@comment We should also provide -g, to match BSD implementations, which
@comment enables GNU mode and overrides POSIXLY_CORRECT in the
@comment environment.
@item -G
@itemx --traditional
Suppress all the extensions made in this implementation, compared to the
System V version.  @xref{Compatibility}, for a list of these.  This
loads the @samp{traditional} module in place of the @samp{gnu} module.

@item -L @var{NUM}
@itemx --nesting-limit=@var{NUM}
Artificially limit the nesting of macro calls to @var{NUM} levels,
stopping program execution if this limit is ever exceeded.  When not
specified, nesting is limited to 1024 levels.

The precise effect of this option might be more correctly associated
with textual nesting than dynamic recursion.  It has been useful
when some complex @code{m4} input was generated by mechanical means.
Most users would never need this option.  If shown to be obtrusive,
this option (which is still experimental) might well disappear.

This option does @emph{not} have the ability to break endless
rescanning loops, since these do not necessarily consume much memory
or stack space.  Through clever usage of rescanning loops, one can
request complex, time-consuming computations from @code{m4} with useful
results.  Putting limitations in this area would break @code{m4} power.
There are many pathological cases: @w{@samp{define(`a', `a')a}} is
only the simplest example (but @pxref{Compatibility}).  Expecting @acronym{GNU}
@code{m4} to detect these would be a little like expecting a compiler
system to detect and diagnose endless loops: it is a quite @emph{hard}
problem in general, if not undecidable!

@item -H @var{NUM}
@itemx --hashsize=@var{NUM}
@item -N @var{NUM}
@itemx --diversions=@var{NUM}
These options are present only for compatibility with previous
versions of GNU @code{m4}.  They do nothing except issue a warning,
because the symbol table size and number of diversions are not fixed
anymore.  They will eventually disappear in future releases.

@itemx -S @var{NUM}
@itemx -T @var{NUM}
These options are present for compatibility with System V @code{m4}, but
do nothing in this implementation.  They may disappear in future
releases, and issue a warning to that effect.
@end table

@acronym{GNU} @code{m4} comes with a feature of freezing internal state
(@pxref{Frozen files}).  This can be used to speed up @code{m4}
execution when reusing a common initialization script.

@table @code
@item -F @var{FILE}
@itemx --freeze-state=@var{FILE}
Once execution is finished, write out the frozen state on the specified
@var{FILE}.  It is conventional, but not required, for @var{FILE} to end
in @samp{.m4f}.

@item -R @var{FILE}
@itemx --reload-state=@var{FILE}
Before execution starts, recover the internal state from the specified
frozen @var{FILE}.  The options @option{-D}, @option{-U}, @option{-t},
@option{-m}, @option{-r}, and @option{--import-environment} take effect
after state is reloaded, but before the input files are read.
@end table

Finally, there are several options for aiding in debugging @code{m4}
scripts.

@table @code
@item -d@r{[}@var{FLAGS}@r{]}
@itemx --debug@r{[}=@var{FLAGS}@r{]}
Set the debug-level according to the flags @var{FLAGS}.  The debug-level
controls the format and amount of information presented by the debugging
functions.  @xref{Debug Levels}, for more details on the format and
meaning of @var{FLAGS}.  If omitted, @var{FLAGS} defaults to
@samp{aeq}.  When the option is presented multiple times, if later
@var{FLAGS} starts with @samp{-} or @samp{+}, they are cumulative,
otherwise the later flags override all earlier occurrences.

@item --debugfile=@var{FILE}
@itemx -o @var{FILE}
@itemx --error-output=@var{FILE}
Redirect debug and trace output to the named @var{FILE}.  Warnings,
error messages, and the output of @code{errprint} and @code{dumpdef},
are still printed to standard error.  If this option is not given, debug
output goes to standard error; if @var{FILE} is the empty string, debug
output is discarded.  @xref{Debug Output}, for more details.  The
spellings @option{-o} and @option{--error-output} are misleading and
inconsistent with other @acronym{GNU} tools; using those spellings will
evoke a warning, and they may be withdrawn or change semantics in a
future release.

@item -l @var{NUM}
@itemx --arglength=@var{NUM}
Restrict the size of the output generated by macro tracing to @var{NUM}
characters per trace line.  If unspecified or zero, output is
unlimited.  @xref{Debug Levels}, for more details.

@item -t @var{NAME}
@itemx --trace=@var{NAME}
This enables tracing for the macro @var{NAME}, at any point where it is
defined.  @var{NAME} need not be defined when this option is given.
This option may be given more than once.  @xref{Trace}, for more details.
@end table

@cindex command line, file names on the
@cindex file names, on the command line
The remaining arguments on the command line are taken to be input file
names.  If no names are present, standard input is read.  A file
name of @file{-} is taken to mean standard input.  It is
conventional, but not required, for input files to end in @samp{.m4}.

The input files are read in the sequence given.  Standard input can be
read more than once, so the file name @file{-} may appear multiple times
on the command line; this makes a difference when input is from a
terminal or other special file type.  It is an error if an input file
ends in the middle of argument collection, a comment, or a quoted
string.
@comment FIXME - it would be nicer if we let these three things
@comment continue across file boundaries, provided that we warn in
@comment interactive use when switching to stdin in a non-default parse
@comment state.

If none of the input files invoked @code{m4exit} (@pxref{M4exit}), the
exit status of @code{m4} will be 0 for success, 1 for general failure
(such as problems with reading an input file), and 63 for version
mismatch (@pxref{Using frozen files}).

If you need to read a file whose name starts with a @file{-}, you can
specify it as @samp{./-file}, or use @option{--} to mark the end of
options.

@node Bugs
@section Problems and bugs

If you have problems with @acronym{GNU} M4 or think you've found a bug,
please report it.  Before reporting a bug, make sure you've actually
found a real bug.  Carefully reread the documentation and see if it
really says you can do what you're trying to do.  If it's not clear
whether you should be able to do something or not, report that too; it's
a bug in the documentation!

Before reporting a bug or trying to fix it yourself, try to isolate it
to the smallest possible input file that reproduces the problem.  Then
send us the input file and the exact results @code{m4} gave you.  Also
say what you expected to occur; this will help us decide whether the
problem was really in the documentation.

Once you've got a precise problem, send e-mail to (Internet)
@email{bug-m4@@gnu.org}.  Please include the version number of @code{m4}
you are using.  You can get this information with the command @samp{m4
--version}.  You can also run @kbd{make check} to generate the file
@file{tests/@/testsuite.log}, useful for including in your report.

Non-bug suggestions are always welcome as well.  If you have questions
about things that are unclear in the documentation or are just obscure
features, please report them too.

@node Manual
@section Using this manual

This manual contains a number of examples of @code{m4} input and output,
and a simple notation is used to distinguish input, output and error
messages from @code{m4}.  Examples are set out from the normal text, and
shown in a fixed width font, like this

@comment ignore
@example
This is an example of an example!
@end example

To distinguish input from output, all output from @code{m4} is prefixed
by the string @samp{@result{}}, and all error messages by the string
@samp{@error{}}.  When showing how command line options affect matters,
the command line is shown with a prompt @samp{$ @kbd{like this}},
otherwise, you can assume that a simple @kbd{m4} invocation will work.
Thus:

@comment ignore
@example
$ @kbd{command line to invoke m4}
Example of input line
@result{}Output line from m4
@error{}and an error message
@end example

The sequence @samp{^D} in an example indicates the end of the input file.
The majority of these examples are self-contained, and you can run them
with similar results.  In fact, the testsuite that is bundled in the
@acronym{GNU} M4 package consists in part of the examples
in this document!

As each of the predefined macros in @code{m4} is described, a prototype
call of the macro will be shown, giving descriptive names to the
arguments, e.g.,

@deffn {Composite (none)} example (@var{string}, @dvar{count, 1}, @
  @ovar{argument}@dots{})
This is a sample prototype.  There is not really a macro named
@code{example}, but this documents that if there were, it would be a
Composite macro, rather than a Builtin, and would be provided by the
module @code{none}.

It requires at least one argument, @var{string}.  Remember that in
@code{m4}, there must not be a space between the macro name and the
opening parenthesis, unless it was intended to call the macro without
any arguments.  The brackets around @var{count} and @var{argument} show
that these arguments are optional.  If @var{count} is omitted, the macro
behaves as if count were @samp{1}, whereas if @var{argument} is omitted,
the macro behaves as if it were the empty string.  A blank argument is
not the same as an omitted argument.  For example, @samp{example(`a')},
@samp{example(`a',`1')}, and @samp{example(`a',`1',)} would behave
identically with @var{count} set to @samp{1}; while @samp{example(`a',)}
and @samp{example(`a',`')} would explicitly pass the empty string for
@var{count}.  The ellipses (@samp{@dots{}}) show that the macro
processes additional arguments after @var{argument}, rather than
ignoring them.
@end deffn

Each builtin definition will list, in parentheses, the module that must
be loaded to use that macro.  The standard modules include
@samp{m4} (which is always available), @samp{gnu} (for @acronym{GNU} specific
m4 extensions), and @samp{traditional} (for compatibility with System V
m4).  @xref{Modules}.

All macro arguments in @code{m4} are strings, but some are given
special interpretation, e.g., as numbers, file names, regular
expressions, etc.  The documentation for each macro will state how the
parameters are interpreted, and what happens if the argument cannot be
parsed according to the desired interpretation.  Unless specified
otherwise, a parameter specified to be a number is parsed as a decimal,
even if the argument has leading zeros; and parsing the empty string as
a number results in 0 rather than an error, although a warning will be
issued.

This document consistently writes and uses @dfn{builtin}, without a
hyphen, as if it were an English word.  This is how the @code{builtin}
primitive is spelled within @code{m4}.

@node Syntax
@chapter Lexical and syntactic conventions

@cindex input tokens
@cindex tokens
As @code{m4} reads its input, it separates it into @dfn{tokens}.  A
token is either a name, a quoted string, or any single character, that
is not a part of either a name or a string.  Input to @code{m4} can also
contain comments.  @acronym{GNU} @code{m4} does not yet understand
multibyte locales; all operations are byte-oriented rather than
character-oriented (although if your locale uses a single byte
encoding, such as @sc{ISO-8859-1}, you will not notice a difference).
However, @code{m4} is eight-bit clean, so you can
use non-@sc{ascii} characters in quoted strings (@pxref{Changequote}),
comments (@pxref{Changecom}), and macro names (@pxref{Indir}), with the
exception of the @sc{nul} character (the zero byte @samp{'\0'}).

@menu
* Names::                       Macro names
* Quoted strings::              Quoting input to @code{m4}
* Comments::                    Comments in @code{m4} input
* Other tokens::                Other kinds of input tokens
* Input processing::            How @code{m4} copies input to output
* Regular expression syntax::   How @code{m4} interprets regular expressions
@end menu

@node Names
@section Macro names

@cindex names
A name is any sequence of letters, digits, and the character @kbd{_}
(underscore), where the first character is not a digit.  @code{m4} will
use the longest such sequence found in the input.  If a name has a
macro definition, it will be subject to macro expansion
(@pxref{Macros}).  Names are case-sensitive.

Examples of legal names are: @samp{foo}, @samp{_tmp}, and @samp{name01}.

The definitions of letters, digits and other input characters can be
changed at any time, using the builtin macro @code{changesyntax}.
@xref{Changesyntax}, for more information.

@node Quoted strings
@section Quoting input to @code{m4}

@cindex quoted string
A quoted string is a sequence of characters surrounded by quote
strings, defaulting to
@kbd{`} and @kbd{'}, where the nested begin and end quotes within the
string are balanced.  The value of a string token is the text, with one
level of quotes stripped off.  Thus

@comment ignore
@example
`'
@result{}
@end example

@noindent
is the empty string, and double-quoting turns into single-quoting.

@comment ignore
@example
``quoted''
@result{}`quoted'
@end example

The quote characters can be changed at any time, using the builtin macros
@code{changequote} (@pxref{Changequote}) or @code{changesyntax}
(@pxref{Changesyntax}).

@node Comments
@section Comments in @code{m4} input

@cindex comments
Comments in @code{m4} are normally delimited by the characters @samp{#}
and newline.  All characters between the comment delimiters are ignored,
but the entire comment (including the delimiters) is passed through to
the output, unless you supply the @option{--discard-comments} or
@option{-c} option at the command line (@pxref{Invoking m4}).  When
discarding comments, the comment delimiters are discarded, even if the
close-comment string is a newline.

Comments cannot be nested, so the first newline after a @samp{#} ends
the comment.  The commenting effect of the begin-comment string
can be inhibited by quoting it.

@example
$ @kbd{m4}
`quoted text' # `commented text'
@result{}quoted text # `commented text'
`quoting inhibits' `#' `comments'
@result{}quoting inhibits # comments
@end example

@comment options: -c
@example
$ @kbd{m4 -c}
`quoted text' # `commented text'
`quoting inhibits' `#' `comments'
@result{}quoted text quoting inhibits # comments
@end example

The comment delimiters can be changed to any string at any time, using
the builtin macros @code{changecom} (@pxref{Changecom}) or
@code{changesyntax} (@pxref{Changesyntax}).

@node Other tokens
@section Other kinds of input tokens

Any character, that is neither a part of a name, nor of a quoted string,
nor a comment, is a token by itself.  When not in the context of macro
expansion, all of these tokens are just copied to output.  However,
during macro expansion, whitespace characters (space, tab, newline,
formfeed, carriage return, vertical tab), parentheses (@samp{(} and
@samp{)}), comma (@samp{,}), and dollar (@samp{$}) have additional
roles, explained later.  Which characters actually perform these roles
can be adjusted with @code{changesyntax} (@pxref{Changesyntax}).

@node Input processing
@section How @code{m4} copies input to output

As @code{m4} reads the input token by token, it will copy each token
directly to the output immediately.

The exception is when it finds a word with a macro definition.  In that
case @code{m4} will calculate the macro's expansion, possibly reading
more input to get the arguments.  It then inserts the expansion in front
of the remaining input.  In other words, the resulting text from a macro
call will be read and parsed into tokens again.

@code{m4} expands a macro as soon as possible.  If it finds a macro call
when collecting the arguments to another, it will expand the second
call first.  For a running example, examine how @code{m4} handles this
input:

@comment ignore
@example
format(`Result is %d', eval(`2**15'))
@end example

@noindent
First, @code{m4} sees that the token @samp{format} is a macro name, so
it collects the tokens @samp{(}, @samp{`Result is %d'}, @samp{,},
and @samp{@w{ }}, before encountering another potential macro.  Sure
enough, @samp{eval} is a macro name, so the nested argument collection
picks up @samp{(}, @samp{`2**15'}, and @samp{)}, invoking the eval macro
with the lone argument of @samp{2**15}.  The expansion of
@samp{eval(2**15)} is @samp{32768}, which is then rescanned as the five
tokens @samp{3}, @samp{2}, @samp{7}, @samp{6}, and @samp{8}; and
combined with the next @samp{)}, the format macro now has all its
arguments, as if the user had typed:

@comment ignore
@example
format(`Result is %d', 32768)
@end example

@noindent
The format macro expands to @samp{Result is 32768}, and we have another
round of scanning for the tokens @samp{Result}, @samp{@w{ }},
@samp{is}, @samp{@w{ }}, @samp{3}, @samp{2}, @samp{7}, @samp{6}, and
@samp{8}.  None of these are macros, so the final output is

@comment ignore
@example
@result{}Result is 32768
@end example

The order in which @code{m4} expands the macros can be explored using
the @ref{Trace} facilities of @acronym{GNU} @code{m4}.

This process continues until there are no more macro calls to expand and
all the input has been consumed.

@node Regular expression syntax
@section How @code{m4} interprets regular expressions

There are several contexts where @code{m4} parses an argument as a
regular expression.  This section describes the various flavors of
regular expressions.  @xref{Changeresyntax}.

@include regexprops-generic.texi

@node Macros
@chapter How to invoke macros

This chapter covers macro invocation, macro arguments and how macro
expansion is treated.

@menu
* Invocation::                  Macro invocation
* Inhibiting Invocation::       Preventing macro invocation
* Macro Arguments::             Macro arguments
* Quoting Arguments::           On Quoting Arguments to macros
* Macro expansion::             Expanding macros
@end menu

@node Invocation
@section Macro invocation

@cindex macro invocation
Macro invocations has one of the forms

@comment ignore
@example
name
@end example

@noindent
which is a macro invocation without any arguments, or

@comment ignore
@example
name(arg1, arg2, @dots{}, arg@var{n})
@end example

@noindent
which is a macro invocation with @var{n} arguments.  Macros can have any
number of arguments.  All arguments are strings, but different macros
might interpret the arguments in different ways.

The opening parenthesis @emph{must} follow the @var{name} directly, with
no spaces in between.  If it does not, the macro is called with no
arguments at all.

For a macro call to have no arguments, the parentheses @emph{must} be
left out.  The macro call

@comment ignore
@example
name()
@end example

@noindent
is a macro call with one argument, which is the empty string, not a call
with no arguments.

@node Inhibiting Invocation
@section Preventing macro invocation

An innovation of the @code{m4} language, compared to some of its
predecessors (like Stratchey's @code{GPM}, for example), is the ability
to recognize macro calls without resorting to any special, prefixed
invocation character.  While generally useful, this feature might
sometimes be the source of spurious, unwanted macro calls.  So, @acronym{GNU}
@code{m4} offers several mechanisms or techniques for inhibiting the
recognition of names as macro calls.

First of all, many builtin macros cannot meaningfully be called
without arguments.  For any of these macros, whenever an opening
parenthesis does not immediately follow their name, the builtin macro
call is not triggered.  This solves the most usual cases, like for
@samp{include} or @samp{eval}.  Later in this document, the sentence
``This macro is recognized only with parameters'' refers to this
specific provision.

@comment FIXME - The feature of blind macros is incompatible with
@comment @acronym{POSIX} and @comment traditional implementations.
@comment Should we  suppress it with the @comment @option{--traditional}
@comment or @option{-G} command line option?

@example
$ @kbd{m4}
eval
@result{}eval
eval(`1')
@result{}1
@end example

@ignore
@comment options: -G
@comment ignore
@example
$ @kbd{m4 -G}
eval
@result{}0
eval(`1')
@result{}1
@end example
@end ignore

There is also a command line option (@option{--prefix-builtins}, or
@option{-P}) that renames all builtin macro names to be prefixed
by @samp{m4_} at startup.  The option has no effect
whatsoever on user defined macros.  For example, with this option,
one has to write @code{m4_dnl} and even @code{m4_m4exit}.  It also has
no effect on whether a macro requires parameters.

@comment options: -P
@example
$ @kbd{m4 -P}
eval
@result{}eval
eval(`1')
@result{}eval(1)
m4_eval
@result{}m4_eval
m4_eval(`1')
@result{}1
@end example

Another alternative is to redefine problematic macros to a name less
likely to cause conflicts, @xref{Definitions}.  Or the parsing engine
can be changed to redefine what constitutes a valid macro name,
@xref{Changesyntax}.

Of course, the simplest way to prevent a name from being interpreted
as a call to an existing macro is to quote it.  The remainder of
this section studies a little more deeply how quoting affects macro
invocation, and how quoting can be used to inhibit macro invocation.

Even if quoting is usually done over the whole macro name, it can also
be done over only a few characters of this name (provided, of course,
that the unquoted portions are not also a macro).  It is also possible
to quote the empty string, but this works only @emph{inside} the name.
For example:

@example
`divert'
@result{}divert
`d'ivert
@result{}divert
di`ver't
@result{}divert
div`'ert
@result{}divert
@end example

@noindent
all yield the string @samp{divert}.  While in both:

@example
`'divert
@result{}
divert`'
@result{}
@end example

@noindent
the @code{divert} builtin macro will be called, which expands to the
empty string.

The output of macro evaluations is always rescanned.  The following
example would yield the string @samp{de}, exactly as if @code{m4}
has been given @w{@samp{substr(`abcde', `3', `2')}} as input:

@example
define(`x', `substr(ab')
@result{}
define(`y', `cde, `3', `2')')
@result{}
x`'y
@result{}de
@end example

Unquoted strings on either side of a quoted string are subject to
being recognized as macro names.  In the following example, quoting the
empty string allows for the second @code{macro} to be recognized as such:

@example
define(`macro', `m')
@result{}
macro(`m')macro
@result{}mmacro
macro(`m')`'macro
@result{}mm
@end example

Quoting may prevent recognizing as a macro name the concatenation of a
macro expansion with the surrounding characters.  In this example:

@example
define(`macro', `di$1')
@result{}
macro(`v')`ert'
@result{}divert
macro(`v')ert
@result{}
@end example

@noindent
the input will produce the string @samp{divert}.  When the quotes were
removed, the @code{divert} builtin was called instead.

@node Macro Arguments
@section Macro arguments

@cindex macros, arguments to
@cindex arguments to macros
When a name is seen, and it has a macro definition, it will be expanded
as a macro.

If the name is followed by an opening parenthesis, the arguments will be
collected before the macro is called.  If too few arguments are
supplied, the missing arguments are taken to be the empty string.
However, some builtins are documented to behave differently for a
missing optional argument than for an explicit empty string.  If
there are too many arguments, the excess arguments are ignored.
Unquoted leading whitespace is stripped off all arguments.

Normally @code{m4} will issue warnings if a builtin macro is called
with an inappropriate number of arguments, but it can be suppressed with
the @option{--quiet} command line option (or @option{--silent}, or
@option{-Q}, @pxref{Invoking m4}).  For user
defined macros, there is no check of the number of arguments given.

@example
$ @kbd{m4}
index(`abc')
@error{}m4:stdin:1: Warning: index: too few arguments: 1 < 2
@result{}0
index(`abc',)
@result{}0
index(`abc', `b', `ignored')
@error{}m4:stdin:3: Warning: index: extra arguments ignored: 3 > 2
@result{}1
@end example

@comment options: -Q
@example
$ @kbd{m4 -Q}
index(`abc')
@result{}0
index(`abc',)
@result{}0
index(`abc', `b', `ignored')
@result{}1
@end example

Macros are expanded normally during argument collection, and whatever
commas, quotes and parentheses that might show up in the resulting
expanded text will serve to define the arguments as well.  Thus, if
@var{foo} expands to @samp{, b, c}, the macro call

@comment ignore
@example
bar(a foo, d)
@end example

@noindent
is a macro call with four arguments, which are @samp{a }, @samp{b},
@samp{c} and @samp{d}.  To understand why the first argument contains
whitespace, remember that leading unquoted whitespace is never part
of an argument, but trailing whitespace always is.

It is possible for a macro's definition to change during argument
collection, in which case the expansion uses the definition that was in
effect at the time the opening @samp{(} was seen.

@example
define(`f', `1')
@result{}
f(define(`f', `2'))
@result{}1
f
@result{}2
@end example

It is an error if the end of file occurs while collecting arguments.

@comment status: 1
@example
define(
^D
@error{}m4:stdin:1: end of file in argument list
@end example

@node Quoting Arguments
@section On Quoting Arguments to macros

@cindex quoted macro arguments
@cindex macros, quoted arguments to
@cindex arguments, quoted macro
Each argument has leading unquoted whitespace removed.  Within each
argument, all unquoted parentheses must match.  For example, if
@var{foo} is a macro,

@comment ignore
@example
foo(() (`(') `(')
@end example

@noindent
is a macro call, with one argument, whose value is @samp{() (() (}.
Commas separate arguments, except when they occur inside quotes,
comments, or unquoted parentheses, @xref{Pseudo Arguments}, for
examples.

It is common practice to quote all arguments to macros, unless you are
sure you want the arguments expanded.  Thus, in the above
example with the parentheses, the `right' way to do it is like this:

@comment ignore
@example
foo(`() (() (')
@end example

It is, however, in certain cases necessary or convenient to leave out
quotes for some arguments, and there is nothing wrong in doing it.  It
just makes life a bit harder, if you are not careful.  For consistency,
this manual follows the rule of thumb that each layer of parentheses
introduces another layer of single quoting, except when showing the
consequences of quoting rules.  This is done even when the quoted string
cannot be a macro, such as with integers when you have not changed the
syntax via @code{changesyntax} (@pxref{Changesyntax}).

@node Macro expansion
@section Macro expansion

@cindex macros, expansion of
@cindex expansion of macros
When the arguments, if any, to a macro call have been collected, the
macro is expanded, and the expansion text is pushed back onto the input
(unquoted), and reread.  The expansion text from one macro call might
therefore result in more macros being called, if the calls are included,
completely or partially, in the first macro calls' expansion.

Taking a very simple example, if @var{foo} expands to @samp{bar}, and
@var{bar} expands to @samp{Hello world}, the input

@comment options: -Dbar='Hello world' -Dfoo=bar
@example
$ @kbd{m4 -Dbar="Hello world" -Dfoo=bar}
foo
@result{}Hello world
@end example

@noindent
will expand first to @samp{bar}, and when this is reread and
expanded, into @samp{Hello world}.

@node Definitions
@chapter How to define new macros

@cindex macros, how to define new
@cindex defining new macros
Macros can be defined, redefined and deleted in several different ways.
Also, it is possible to redefine a macro without losing a previous
value, and bring back the original value at a later time.

@menu
* Define::                      Defining a new macro
* Arguments::                   Arguments to macros
* Pseudo Arguments::            Special arguments to macros
* Undefine::                    Deleting a macro
* Defn::                        Renaming macros
* Pushdef::                     Temporarily redefining macros
* Renamesyms::                  Renaming macros with regular expressions

* Indir::                       Indirect call of macros
* Builtin::                     Indirect call of builtins
* M4symbols::                   Getting the defined macro names
@end menu

@node Define
@section Defining a macro

The normal way to define or redefine macros is to use the builtin
@code{define}:

@deffn {Builtin (m4)} define (@var{name}, @ovar{expansion})
Defines @var{name} to expand to @var{expansion}.  If
@var{expansion} is not given, it is taken to be empty.

The expansion of @code{define} is void.
The macro @code{define} is recognized only with parameters.
@end deffn

The following example defines the macro @var{foo} to expand to the text
@samp{Hello World.}.

@example
define(`foo', `Hello world.')
@result{}
foo
@result{}Hello world.
@end example

The empty line in the output is there because the newline is not
a part of the macro definition, and it is consequently copied to
the output.  This can be avoided by use of the macro @code{dnl}.
@xref{Dnl}, for details.

The first argument to @code{define} should be quoted; otherwise, if the
macro is already defined, you will be defining a different macro.  This
example shows the problems with underquoting, since we did not want to
redefine @code{one}:

@example
define(foo, one)
@result{}
define(foo, two)
@result{}
one
@result{}two
@end example

@cindex @acronym{GNU} extensions
@acronym{GNU} @code{m4} normally replaces only the @emph{topmost}
definition of a macro if it has several definitions from @code{pushdef}
(@pxref{Pushdef}).  Some other implementations of @code{m4} replace all
definitions of a macro with @code{define}.  @xref{Incompatibilities},
for more details.
@comment FIXME - See Austin group XCU ERN 118; this is considered
@comment ambiguous in the current version of POSIX.  The best thing to
@comment do here would probably be keep GNU semantics of popdef/pushdef
@comment in the m4 module unconditionally, then have a shadow builtin in
@comment the traditional module that does the undefine/pushdef
@comment semantics, rather than our current keying off of
@comment POSIXLY_CORRECT within the m4 module.

As a @acronym{GNU} extension, the first argument to @code{define} does
not have to be a simple word.
It can be any text string, even the empty string.  A macro with a
non-standard name cannot be invoked in the normal way, as the name is
not recognized.  It can only be referenced by the builtins @ref{Indir}
and @ref{Defn}.

@cindex arrays
Arrays and associative arrays can be simulated by using this trick.

@example
define(`array', `defn(format(``array[%d]'', `$1'))')
@result{}
define(`array_set', `define(format(``array[%d]'', `$1'), `$2')')
@result{}
array_set(`4', `array element no. 4')
@result{}
array_set(`17', `array element no. 17')
@result{}
array(`4')
@result{}array element no. 4
array(eval(`10 + 7'))
@result{}array element no. 17
@end example

Change the @code{%d} to @code{%s} and it is an associative array.

@node Arguments
@section Arguments to macros

@cindex macros, arguments to
@cindex Arguments to macros
Macros can have arguments.  The @var{n}th argument is denoted by
@code{$n} in the expansion text, and is replaced by the @var{n}th actual
argument, when the macro is expanded.  Replacement of arguments happens
before rescanning, regardless of how many nesting levels of quoting
appear in the expansion.  Here is an example of a macro with
two arguments.  It simply exchanges the order of the two arguments.

@example
define(`exch', `$2, $1')
@result{}
exch(`arg1', `arg2')
@result{}arg2, arg1
@end example

This can be used, for example, if you like the arguments to
@code{define} to be reversed.

@example
define(`exch', `$2, $1')
@result{}
define(exch(``expansion text'', ``macro''))
@result{}
macro
@result{}expansion text
@end example

@xref{Quoting Arguments}, for an explanation of the double quotes.
(You should try and improve this example so that clients of @code{exch}
do not have to double quote.  @pxref{Answers})

@cindex @acronym{GNU} extensions
@acronym{GNU} @code{m4} allows the number following the @samp{$} to
consist of one
or more digits, allowing macros to have any number of arguments.  This
is not so in UNIX implementations of @code{m4}, which only recognize
one digit.
@comment FIXME - See Austin group XCU ERN 111.  This is controversial,
@comment and POSIX is moving to reserve ${ for implementation use.  We
@comment should phase out $10 and replace it with ${10}, and consider
@comment other extensions like ${1-default}.  There are existing m4
@comment scripts that depend on $10 being the first parameter
@comment concatenated with 0, not the tenth argument.

As a special case, the zeroth argument, @code{$0}, is always the name
of the macro being expanded.

@example
define(`test', ``Macro name: $0'')
@result{}
test
@result{}Macro name: test
@end example

If you want quoted text to appear as part of the expansion text,
remember that quotes can be nested in quoted strings.  Thus, in

@example
define(`foo', `This is macro `foo'.')
@result{}
foo
@result{}This is macro foo.
@end example

@noindent
The @samp{foo} in the expansion text is @emph{not} expanded, since it is
a quoted string, and not a name.

@node Pseudo Arguments
@section Special arguments to macros

@cindex special arguments to macros
@cindex macros, special arguments to
@cindex arguments to macros, special
There is a special notation for the number of actual arguments supplied,
and for all the actual arguments.

The number of actual arguments in a macro call is denoted by @code{$#}
in the expansion text.  Thus, a macro to display the number of arguments
given can be

@example
define(`nargs', `$#')
@result{}
nargs
@result{}0
nargs()
@result{}1
nargs(`arg1', `arg2', `arg3')
@result{}3
nargs(`commas can be quoted, like this')
@result{}1
nargs(arg1#inside comments, commas do not separate arguments
still arg1)
@result{}1
nargs((unquoted parentheses, like this, group arguments))
@result{}1
@end example

The notation @code{$*} can be used in the expansion text to denote all
the actual arguments, unquoted, with commas in between.  For example

@example
define(`echo', `$*')
@result{}
echo(arg1,    arg2, arg3 , arg4)
@result{}arg1,arg2,arg3 ,arg4
@end example

Often each argument should be quoted, and the notation @code{$@@} handles
that.  It is just like @code{$*}, except that it quotes each argument.
A simple example of that is:

@example
define(`echo', `$@@')
@result{}
echo(arg1,    arg2, arg3 , arg4)
@result{}arg1,arg2,arg3 ,arg4
@end example

Where did the quotes go?  Of course, they were eaten, when the expanded
text were reread by @code{m4}.  To show the difference, try

@example
define(`echo1', `$*')
@result{}
define(`echo2', `$@@')
@result{}
define(`foo', `This is macro `foo'.')
@result{}
echo1(foo)
@result{}This is macro This is macro foo..
echo1(`foo')
@result{}This is macro foo.
echo2(foo)
@result{}This is macro foo.
echo2(`foo')
@result{}foo
@end example

@noindent
@xref{Trace}, if you do not understand this.  As another example of the
difference, remember that comments encountered in arguments are passed
untouched to the macro, and that quoting disables comments.

@example
define(`echo1', `$*')
@result{}
define(`echo2', `$@@')
@result{}
define(`foo', `bar')
@result{}
echo1(#foo'foo
foo)
@result{}#foo'foo
@result{}bar
echo2(#foo'foo
foo)
@result{}#foobar
@result{}bar'
@end example

A @samp{$} sign in the expansion text, that is not followed by anything
@code{m4} understands, is simply copied to the macro expansion, as any
other text is.

@example
define(`foo', `$$$ hello $$$')
@result{}
foo
@result{}$$$ hello $$$
@end example

If you want a macro to expand to something like @samp{$12}, the
judicious use of nested quoting can put a safe character between the
@code{$} and the next character, relying on the rescanning to remove the
nested quote.  This will prevent @code{m4} from interpreting the
@code{$} sign as a reference to an argument.

@example
define(`foo', `no nested quote: $1')
@result{}
foo(`arg')
@result{}no nested quote: arg
define(`foo', `nested quote around $: `$'1')
@result{}
foo(`arg')
@result{}nested quote around $: $1
define(`foo', `nested empty quote after $: $`'1')
@result{}
foo(`arg')
@result{}nested empty quote after $: $1
define(`foo', `nested quote around next character: $`1'')
@result{}
foo(`arg')
@result{}nested quote around next character: $1
define(`foo', `nested quote around both: `$1'')
@result{}
foo(`arg')
@result{}nested quote around both: arg
@end example

@node Undefine
@section Deleting a macro

@cindex macros, how to delete
@cindex deleting macros
@cindex undefining macros
A macro definition can be removed with @code{undefine}:

@deffn {Builtin (m4)} undefine (@var{name}@dots{})
For each argument, remove the macro @var{name}.  The macro names must
necessarily be quoted, since they will be expanded otherwise.

The expansion of @code{undefine} is void.
The macro @code{undefine} is recognized only with parameters.
@end deffn

@example
foo bar blah
@result{}foo bar blah
define(`foo', `some')define(`bar', `other')define(`blah', `text')
@result{}
foo bar blah
@result{}some other text
undefine(`foo')
@result{}
foo bar blah
@result{}foo other text
undefine(`bar', `blah')
@result{}
foo bar blah
@result{}foo bar blah
@end example

Undefining a macro inside that macro's expansion is safe; the macro
still expands to the definition that was in effect at the @samp{(}.

@example
define(`f', ``$0':$1')
@result{}
f(f(f(undefine(`f')`hello world')))
@result{}f:f:f:hello world
f(`bye')
@result{}f(bye)
@end example

It is not an error for @var{name} to have no macro definition.  In that
case, @code{undefine} does nothing.

@node Defn
@section Renaming macros

@cindex macros, how to rename
@cindex renaming macros
It is possible to rename an already defined macro.  To do this, you need
the builtin @code{defn}:

@deffn {Builtin (m4)} defn (@var{name}@dots{})
Expands to the @emph{quoted definition} of each @var{name}.  If an
argument is not a defined macro, the expansion for that argument is
empty and triggers a warning.

If @var{name} is a user-defined macro, the quoted definition is simply
the quoted expansion text.  If, instead, @var{name} is a builtin, the
expansion is a special token, which points to the builtin's internal
definition.  This token is only meaningful as the second argument to
@code{define} (and @code{pushdef}), and is silently converted to an
empty string in most other contexts.
@comment FIXME - Other implementations, such as Solaris, can pass a
@comment builtin token around to other macros, flattening it only on output:
@comment  define(foo, a`'defn(`divnum')b)
@comment  len(foo) => 3
@comment  index(foo, defn(`divnum') => 1
@comment  foo => ab
@comment It may be worth making some changes to support this behavior.

The macro @code{defn} is recognized only with parameters.
@end deffn

Its normal use is best understood through an example, which shows how to
rename @code{undefine} to @code{zap}:

@example
define(`zap', defn(`undefine'))
@result{}
zap(`undefine')
@result{}
undefine(`zap')
@result{}undefine(zap)
@end example

In this way, @code{defn} can be used to copy macro definitions, and also
definitions of builtin macros.  Even if the original macro is removed,
the other name can still be used to access the definition.

The fact that macro definitions can be transferred also explains why you
should use @code{$0}, rather than retyping a macro's name in its
definition:

@example
define(`foo', `This is `$0'')
@result{}
define(`bar', defn(`foo'))
@result{}
bar
@result{}This is bar
@end example

Macros used as string variables should be referred through @code{defn},
to avoid unwanted expansion of the text:

@example
define(`string', `The macro dnl is very useful
')
@result{}
string
@result{}The macro @comment
defn(`string')
@result{}The macro dnl is very useful
@result{}
@end example

However, it is important to remember that @code{m4} rescanning is purely
textual.  If an unbalanced end-quote string occurs in a macro
definition, the rescan will see that embedded quote as the termination
of the quoted string, and the remainder of the macro's definition will
be rescanned unquoted.  Thus it is a good idea to avoid unbalanced
end-quotes in macro definitions or arguments to macros.

@example
define(`foo', a'a)
@result{}
define(`a', `A')
@result{}
define(`echo', `$@@')
@result{}
foo
@result{}A'A
defn(`foo')
@result{}aA'
echo(foo)
@result{}AA'
@end example

Using @code{defn} to generate special tokens for builtin macros outside
of expected contexts can sometimes trigger warnings.  But most of the
time, such tokens are silently converted to the empty string.

@example
defn(`defn')
@result{}
define(defn(`divnum'), `cannot redefine a builtin token')
@error{}m4:stdin:2: Warning: define: invalid macro name ignored
@result{}
divnum
@result{}0
@end example

Since @code{defn} can take more than one argument, it can be used to
concatenate multiple macros into one.
@comment FIXME - we don't yet handle mixing text and builtins.  This
@comment example passes under Solaris (minus the warning).

@comment xfail
@example
defn(`foo')
@error{}m4:stdin:1: Warning: defn: undefined macro `foo'
@result{}
define(`foo', `a')
@result{}
define(`bar', defn(`foo', `divnum'))
@result{}
define(`blah', defn(`divnum', `foo'))
@result{}
bar
@result{}a0
blah
@result{}0a
@end example

@node Pushdef
@section Temporarily redefining macros

@cindex macros, temporary redefinition of
@cindex temporary redefinition of macros
@cindex redefinition of macros, temporary
It is possible to redefine a macro temporarily, reverting to the
previous definition at a later time.  This is done with the builtins
@code{pushdef} and @code{popdef}:

@deffn {Builtin (m4)} pushdef (@var{name}, @ovar{expansion})
@deffnx {Builtin (m4)} popdef (@var{name}@dots{})
Analogous to @code{define} and @code{undefine}.

These macros work in a stack-like fashion.  A macro is temporarily
redefined with @code{pushdef}, which replaces an existing definition of
@var{name}, while saving the previous definition, before the new one is
installed.  If there is no previous definition, @code{pushdef} behaves
exactly like @code{define}.

If a macro has several definitions (of which only one is accessible),
the topmost definition can be removed with @code{popdef}.  If there is
no previous definition, @code{popdef} behaves like @code{undefine}.

The expansion of both @code{pushdef} and @code{popdef} is void.
The macros @code{pushdef} and @code{popdef} are recognized only with
parameters.
@end deffn

@example
define(`foo', `Expansion one.')
@result{}
foo
@result{}Expansion one.
pushdef(`foo', `Expansion two.')
@result{}
foo
@result{}Expansion two.
pushdef(`foo', `Expansion three.')
@result{}
pushdef(`foo', `Expansion four.')
@result{}
popdef(`foo')
@result{}
foo
@result{}Expansion three.
popdef(`foo', `foo')
@result{}
foo
@result{}Expansion one.
popdef(`foo')
@result{}
foo
@result{}foo
@end example

If a macro with several definitions is redefined with @code{define}, the
topmost definition is @emph{replaced} with the new definition.  If it is
removed with @code{undefine}, @emph{all} the definitions are removed,
and not only the topmost one.

@example
define(`foo', `Expansion one.')
@result{}
foo
@result{}Expansion one.
pushdef(`foo', `Expansion two.')
@result{}
foo
@result{}Expansion two.
define(`foo', `Second expansion two.')
@result{}
foo
@result{}Second expansion two.
undefine(`foo')
@result{}
foo
@result{}foo
@end example

@cindex local variables
@cindex variables, local
Local variables within macros are made with @code{pushdef} and
@code{popdef}.  At the start of the macro a new definition is pushed,
within the macro it is manipulated and at the end it is popped,
revealing the former definition.

It is possible to temporarily redefine a builtin with @code{pushdef}
and @code{defn}.

@node Renamesyms
@section Renaming macros with regular expressions

@cindex regular expressions
@cindex macros, how to rename
@cindex renaming macros
@cindex @acronym{GNU} extensions
Sometimes it is desirable to rename multiple symbols without having to
use a long sequence of calls to @code{define}.  The @code{renamesyms}
builtin allows this:

@deffn {Builtin (gnu)} renamesyms (@var{regexp}, @var{replacement}, @
  @ovar{resyntax})
Global renaming of macros is done by @code{renamesyms}, which selects
all macros with names that match @var{regexp}, and renames each match
according to @var{replacement}.  It is unspecified what happens if the
rename causes multiple macros to map to the same name.
@comment FIXME - right now, collisions cause a core dump on some platforms:
@comment define(bar,1)define(baz,2)renamesyms(^ba., baa)dumpdef(`baa')

If @var{resyntax} is given, the particular flavor of regular
expression understood with respect to @var{regexp} can be changed from
the current default.  @xref{Changeresyntax}, for details of the values
that can be given for this argument.

A macro that does not have a name that matches @var{regexp} is left
with its original name.  If only part of the name matches, any part of
the name that is not covered by @var{regexp} is copied to the
replacement name.  Whenever a match is found in the name, the search
proceeds from the end of the match, so no character in the original
name can be substituted twice.  If @var{regexp} matches a string of
zero length, the start position for the continued search is
incremented to avoid infinite loops.

Where a replacement is to be made, @var{replacement} replaces the
matched text in the original name, with @samp{\@var{n}} substituted by
the text matched by the @var{n}th parenthesized sub-expression of
@var{regexp}, and @samp{\&} being the text matched by the entire
regular expression.

The expansion of @code{renamesyms} is void.
The macro @code{renamesyms} is recognized only with parameters.
@end deffn

Here is an example that performs the same renaming as the
@option{--prefix-builtins} option (or @option{-P}).  Where
@option{--prefix-builtins} only renames M4 builtin macros,
@code{renamesyms} will rename any macros that match when it runs,
including text macros.

@example
renamesyms(`^.*$', `m4_\&')
@result{}
@end example

If @var{resyntax} is given, @var{regexp} must be given according to
the syntax chosen, though the default regular expression syntax
remains unchanged for other invocations.  Here is a more realistic
example that performs a similar renaming on macros, except that it
ignores macros with names that begin with @samp{_}, and avoids creating
macros with names that begin with @samp{m4_m4}.

@example
renamesyms(`^[^_]\w*$', `m4_\&')
@result{}
m4_renamesyms(`^m4_m4(\w*)$', `m4_\1', `POSIX_EXTENDED')
@result{}
@end example

When a symbol has multiple definitions, thanks to @code{pushdef}, the
entire stack is renamed.

@example
pushdef(`foo', `1')pushdef(`foo', `2')
@result{}
renamesyms(`^foo$', `bar')
@result{}
bar
@result{}2
popdef(`bar')bar
@result{}1
popdef(`bar')bar
@result{}bar
@end example

@node Indir
@section Indirect call of macros

@cindex indirect call of macros
@cindex call of macros, indirect
@cindex macros, indirect call of
@cindex @acronym{GNU} extensions
Any macro can be called indirectly with @code{indir}:

@deffn {Builtin (gnu)} indir (@var{name}, @ovar{args@dots{}})
Results in a call to the macro @var{name}, which is passed the
rest of the arguments @var{args}.  If @var{name} is not defined, an
error message is printed, and the expansion is void.

The macro @code{indir} is recognized only with parameters.
@end deffn

This can be used to call macros with computed or ``invalid''
names (@code{define} allows such names to be defined):

@example
define(`$$internal$macro', `Internal macro (name `$0')')
@result{}
$$internal$macro
@result{}$$internal$macro
indir(`$$internal$macro')
@result{}Internal macro (name $$internal$macro)
@end example

The point is, here, that larger macro packages can have private macros
defined, that will not be called by accident.  They can @emph{only} be
called through the builtin @code{indir}.

One other point to observe is that argument collection occurs before
@code{indir} invokes @var{name}, so if argument collection changes the
value of @var{name}, that will be reflected in the final expansion.
This is different than the behavior when invoking macros directly,
where the definition that was in effect before argument collection is
used.

@example
define(`f', `1')
@result{}
f(define(`f', `2'))
@result{}1
indir(`f', define(`f', `3'))
@result{}3
indir(`f', undefine(`f'))
@error{}m4:stdin:4: Warning: indir: undefined macro `f'
@result{}
@end example

@node Builtin
@section Indirect call of builtins

@cindex indirect call of builtins
@cindex call of builtins, indirect
@cindex builtins, indirect call of
@cindex @acronym{GNU} extensions
Builtin macros can be called indirectly with @code{builtin}:

@deffn {Builtin (gnu)} builtin (@var{name}, @ovar{args@dots{}})
Results in a call to the builtin @var{name}, which is passed the
rest of the arguments @var{args}.  If @var{name} does not name a
builtin, a warning message is printed, and the expansion is void.

The macro @code{builtin} is recognized only with parameters.
@end deffn

This can be used even if @var{name} has been given another definition
that has covered the original, or been undefined so that no macro
maps to the builtin.

@example
pushdef(`define', `hidden')
@result{}
undefine(`undefine')
@result{}
define(`foo', `bar')
@result{}hidden
foo
@result{}foo
builtin(`define', `foo', `BAR')
@result{}
foo
@result{}BAR
undefine(`foo')
@result{}undefine(foo)
foo
@result{}BAR
builtin(`undefine', `foo')
@result{}
foo
@result{}foo
@end example

The @var{name} argument only matches the original name of the builtin,
even when the @option{--prefix-builtins} option (or @option{-P},
@pxref{Invoking m4}) is in effect.  This is different from @code{indir},
which only tracks current macro names.

@comment options: -P
@example
$ @kbd{m4 -P}
m4_builtin(`divnum')
@result{}0
m4_builtin(`m4_divnum')
@error{}m4:stdin:2: Warning: m4_builtin: undefined builtin `m4_divnum'
@result{}
m4_indir(`divnum')
@error{}m4:stdin:3: Warning: m4_indir: undefined macro `divnum'
@result{}
m4_indir(`m4_divnum')
@result{}0
@end example

Note that @code{indir} and @code{builtin} can be used to invoke builtins
without arguments, even when they normally require parameters to be
recognized; but it will provoke a warning, and the expansion will behave
as though empty strings had been passed as the required arguments.

@example
builtin
@result{}builtin
builtin()
@error{}m4:stdin:2: Warning: builtin: undefined builtin `'
@result{}
builtin(`builtin')
@error{}m4:stdin:3: Warning: builtin: too few arguments: 0 < 1
@result{}
builtin(`builtin',)
@error{}m4:stdin:4: Warning: builtin: undefined builtin `'
@result{}
indir(`index')
@error{}m4:stdin:5: Warning: index: too few arguments: 0 < 2
@result{}0
@end example

@node M4symbols
@section Getting the defined macro names

@cindex macro names
@cindex @acronym{GNU} extensions
The name of the currently defined macros can be accessed by
@code{m4symbols}:

@deffn {Builtin (gnu)} m4symbols (@ovar{names@dots{}})
Without arguments, @code{m4symbols} expands to a sorted list of quoted
strings, separated by commas.  This contrasts with @code{dumpdef}
(@pxref{Dumpdef}), whose output cannot be accessed by @code{m4}
programs.

When given arguments, @code{m4symbols} returns the sorted subset of the
@var{names} currently defined, and silently ignores the rest.
@end deffn

@example
m4symbols(`ifndef', `ifdef', `define', `undef')
@result{}define,ifdef
@end example

@node Conditionals
@chapter Conditionals, loops, and recursion

Macros, expanding to plain text, perhaps with arguments, are not quite
enough.  We would like to have macros expand to different things, based
on decisions taken at run-time.  For that, we need some kind of conditionals.
Also, we would like to have some kind of loop construct, so we could do
something a number of times, or while some condition is true.

@menu
* Ifdef::                       Testing if a macro is defined
* Ifelse::                      If-else construct, or multibranch
* Shift::                       Recursion in @code{m4}
* Forloop::                     Iteration by counting
* Foreach::                     Iteration by list contents
@end menu

@node Ifdef
@section Testing if a macro is defined

@cindex conditionals
There are two different builtin conditionals in @code{m4}.  The first is
@code{ifdef}:

@deffn {Builtin (m4)} ifdef (@var{name}, @var{string-1}, @ovar{string-2})
If @var{name} is defined as a macro, @code{ifdef} expands to
@var{string-1}, otherwise to @var{string-2}.  If @var{string-2} is
omitted, it is taken to be the empty string (according to the normal
rules).

The macro @code{ifdef} is recognized only with parameters.
@end deffn

@example
ifdef(`foo', ``foo' is defined', ``foo' is not defined')
@result{}foo is not defined
define(`foo', `')
@result{}
ifdef(`foo', ``foo' is defined', ``foo' is not defined')
@result{}foo is defined
ifdef(`no_such_macro', `yes', `no', `extra argument')
@error{}m4:stdin:4: Warning: ifdef: extra arguments ignored: 4 > 3
@result{}no
@end example

@node Ifelse
@section If-else construct, or multibranch

@cindex comparing strings
The other conditional, @code{ifelse}, is much more powerful.  It can be
used as a way to introduce a long comment, as an if-else construct, or
as a multibranch, depending on the number of arguments supplied:

@deffn {Builtin (m4)} ifelse (@var{comment})
@deffnx {Builtin (m4)} ifelse (@var{string-1}, @var{string-2}, @var{equal}, @
  @ovar{not-equal})
@deffnx {Builtin (m4)} ifelse (@var{string-1}, @var{string-2}, @var{equal-1}, @
  @var{string-3}, @var{string-4}, @var{equal-2}, @dots{})
Used with only one argument, the @code{ifelse} simply discards it and
produces no output.

If called with three or four arguments, @code{ifelse} expands into
@var{equal}, if @var{string-1} and @var{string-2} are equal (character
for character), otherwise it expands to @var{not-equal}.  A final fifth
argument is ignored, after triggering a warning.

If called with six or more arguments, and @var{string-1} and
@var{string-2} are equal, @code{ifelse} expands into @var{equal-1},
otherwise the first three arguments are discarded and the processing
starts again.

The macro @code{ifelse} is recognized only with parameters.
@end deffn

Using only one argument is a common @code{m4} idiom for introducing a
block comment, as an alternative to repeatedly using @code{dnl}.  This
special usage is recognized by @acronym{GNU} @code{m4}, so that in this
case, the warning about missing arguments is never triggered.

@example
ifelse(`some comments')
@result{}
ifelse(`foo', `bar')
@error{}m4:stdin:2: Warning: ifelse: too few arguments: 2 < 3
@result{}
@end example

Using three or four arguments provides decision points.

@example
ifelse(`foo', `bar', `true')
@result{}
ifelse(`foo', `foo', `true')
@result{}true
define(`foo', `bar')
@result{}
ifelse(foo, `bar', `true', `false')
@result{}true
ifelse(foo, `foo', `true', `false')
@result{}false
@end example

Notice how the first argument was used unquoted; it is common to compare
the expansion of a macro with a string.  With this macro, you can now
reproduce the behavior of many of the builtins, where the macro is
recognized only with arguments.

@example
define(`foo', `ifelse(`$#', `0', ``$0'', `arguments:$#')')
@result{}
foo
@result{}foo
foo()
@result{}arguments:1
foo(`a', `b', `c')
@result{}arguments:3
@end example

@cindex multibranches
However, @code{ifelse} can take more than four arguments.  If given more
than four arguments, @code{ifelse} works like a @code{case} or @code{switch}
statement in traditional programming languages.  If @var{string-1} and
@var{string-2} are equal, @code{ifelse} expands into @var{equal-1}, otherwise
the procedure is repeated with the first three arguments discarded.  This
calls for an example:

@example
ifelse(`foo', `bar', `third', `gnu', `gnats')
@error{}m4:stdin:1: Warning: ifelse: extra arguments ignored: 5 > 4
@result{}gnu
ifelse(`foo', `bar', `third', `gnu', `gnats', `sixth')
@result{}
ifelse(`foo', `bar', `third', `gnu', `gnats', `sixth', `seventh')
@result{}seventh
ifelse(`foo', `bar', `3', `gnu', `gnats', `6', `7', `8')
@error{}m4:stdin:4: Warning: ifelse: extra arguments ignored: 8 > 7
@result{}7
@end example

Naturally, the normal case will be slightly more advanced than these
examples.  A common use of @code{ifelse} is in macros implementing loops
of various kinds.

@node Shift
@section Recursion in @code{m4}

@cindex recursive macros
@cindex macros, recursive
There is no direct support for loops in @code{m4}, but macros can be
recursive.  There is no limit on the number of recursion levels, other
than those enforced by your hardware and operating system.

@cindex loops
Loops can be programmed using recursion and the conditionals described
previously.

There is a builtin macro, @code{shift}, which can, among other things,
be used for iterating through the actual arguments to a macro:

@deffn {Builtin (m4)} shift (@var{arg1}, @dots{})
Takes any number of arguments, and expands to all its arguments except
@var{arg1}, separated by commas, with each argument quoted.

The macro @code{shift} is recognized only with parameters.
@end deffn

@example
shift
@result{}shift
shift(`bar')
@result{}
shift(`foo', `bar', `baz')
@result{}bar,baz
@end example

An example of the use of @code{shift} is this macro:

@deffn Composite reverse (@dots{})
Takes any number of arguments, and reverse their order.
@end deffn

It is implemented as:

@example
define(`reverse', `ifelse(`$#', `0', , `$#', `1', ``$1'',
                          `reverse(shift($@@)), `$1'')')
@result{}
reverse
@result{}
reverse(`foo')
@result{}foo
reverse(`foo', `bar', `gnats', `and gnus')
@result{}and gnus, gnats, bar, foo
@end example

While not a very interesting macro, it does show how simple loops can be
made with @code{shift}, @code{ifelse} and recursion.  It also shows
that @code{shift} is usually used with @samp{$@@}.  Sometimes, a
recursive algorithm requires adding quotes to each element:

@deffn Composite quote (@dots{})
@deffnx Composite dquote (@dots{})
@deffnx Composite dquote_elt (@dots{})
Takes any number of arguments, and quoting.  With @code{quote}, only one
level of quoting is added, effectively removing whitespace after commas
and turning the arguments into a string.  With @code{dquote}, two
levels of quoting are added, one around each element, and one around
the list.  And with @code{dquote_elt}, two levels of quoting are added
around each element.
@end deffn

Here is an implementation, along with an example usage.

@comment FIXME - these macros are worth reusing in other examples;
@comment factor them into examples/quote.m4.
@example
define(`quote', `ifelse(`$#', `0', `', ``$*'')')dnl
define(`dquote', ``$@@'')dnl
define(`dquote_elt', `ifelse(`$#', `0', `', `$#', `1', ```$1''',
                             ```$1'',dquote_elt(shift($@@))')')dnl
-quote-dquote-dquote_elt-
@result{}----
-quote(`1')-dquote(`1')-dquote_elt(`1')-
@result{}-1-`1'-`1'-
-quote(`1',`2')-dquote(`1',`2')-dquote_elt(`1',`2')-
@result{}-1,2-`1',`2'-`1',`2'-
dquote(dquote_elt(`1',`2'))
@result{}``1'',``2''
dquote_elt(dquote(`1',`2'))
@result{}``1',`2''
@end example

The last two lines show that when given two arguments, @code{dquote}
results in one string, while @code{dquote_elt} results in two.

@node Forloop
@section Iteration by counting

@cindex for loops
@cindex loops, counting
@cindex counting loops
Here is an example of a loop macro that implements a simple for loop.
@comment FIXME - this section still needs some work done

@deffn Composite forloop (@var{iterator}, @var{start}, @var{end}, @var{text})
Takes the name in @var{iterator}, which must be a valid macro name, and
successively assign it each integer value from @var{start} to @var{end},
inclusive.  For each assignment to @var{iterator}, append @var{text} to
the expansion of the @code{forloop}.  @var{text} may refer to
@var{iterator}.  Any definition of @var{iterator} prior to this
invocation is restored.
@end deffn

It can, for example, be used for simple counting:

@comment FIXME - include(`forloop.m4')
@comment ignore
@example
forloop(`i', 1, 8, `i ')
@result{}1 2 3 4 5 6 7 8
@end example

The arguments are a name for the iteration variable, the starting value,
the final value, and the text to be expanded for each iteration.  With
this macro, the macro @code{i} is defined only within the loop.  After
the loop, it retains whatever value it might have had before.

For-loops can be nested, like

@comment ignore
@example
forloop(`i', 1, 4, `forloop(`j', 1, 8, `(i, j) ')
')
@result{}(1, 1) (1, 2) (1, 3) (1, 4) (1, 5) (1, 6) (1, 7) (1, 8)
@result{}(2, 1) (2, 2) (2, 3) (2, 4) (2, 5) (2, 6) (2, 7) (2, 8)
@result{}(3, 1) (3, 2) (3, 3) (3, 4) (3, 5) (3, 6) (3, 7) (3, 8)
@result{}(4, 1) (4, 2) (4, 3) (4, 4) (4, 5) (4, 6) (4, 7) (4, 8)
@result{}
@end example

The implementation of the @code{forloop} macro is fairly
straightforward.  The @code{forloop} macro itself is simply a wrapper,
which saves the previous definition of the first argument, calls the
internal macro @code{_forloop}, and re-establishes the saved definition of
the first argument.

The macro @code{_forloop} expands the fourth argument once, and tests
to see if it is finished.  If it has not finished, it increments
the iteration variable (using the predefined macro @code{incr},
@pxref{Incr}), and recurses.

Here is the actual implementation of @code{forloop}:

@comment ignore
@example
define(`forloop',
  `pushdef(`$1', `$2')_forloop(`$1', `$2', `$3', `$4')popdef(`$1')')
define(`_forloop',
  `$4`'ifelse($1, `$3', ,
    `define(`$1', incr($1))_forloop(`$1', `$2', `$3', `$4')')')
@end example

Notice the careful use of quotes.  Only three macro arguments are
unquoted, each for its own reason.  Try to find out @emph{why} these
three arguments are left unquoted, and see what happens if they are
quoted.

Now, even though these two macros are useful, they are still not robust
enough for general use. They lack even basic error handling of cases
like start value less than final value, and the first argument not being
a name.  Correcting these errors are left as an exercise to the reader.

@node Foreach
@section Iteration by list contents

@cindex for each loops
@cindex loops, list iteration
@cindex iterating over lists
Here is an example of a loop macro that implements list iteration.
@comment FIXME - this section still needs some work done

@deffn Composite foreach (@var{iterator}, @var{paren-list}, @var{text})
Takes the name in @var{iterator}, which must be a valid macro name, and
successively assign it each value from @var{paren-list}.
@var{paren-list} is a comma-separated list of elements surrounded by
parentheses.  For each assignment to @var{iterator}, append @var{text}
to the expansion of @code{foreach}.  @var{text} may refer to
@var{iterator}.  Any definition of @var{iterator} prior to this
invocation is restored.
@end deffn

As an example, this displays each word in a list inside of a sentence.

@comment FIXME - include(`foreach.m4')
@comment ignore
@example
foreach(`x', `(foo, bar, foobar)', `Word was: x
')
@result{}Word was: foo
@result{}Word was: bar
@result{}Word was: foobar
@end example

The implementation of the @code{foreach} macro is a bit more involved;
it is a wrapper around two helper macros.  First, @code{_arg1} is needed
to grab the first element of a list.  Second, @code{_foreach} implements
the recursion, successively walking through the original list.

Here is an actual implementation of @code{forloop}, followed by a
demonstration of using it to filter out a list of symbols that contain
@samp{if}.

@comment FIXME - include(foreach.m4),include(quote.m4)
@example
define(`foreach', `pushdef(`$1')_foreach($@@)popdef(`$1')')dnl
define(`_arg1', ``$1'')dnl
define(`_foreach',
       `ifelse($2, `()', ,
               `define(`$1',
                       `_arg1$2')$3`'_foreach(`$1', `(shift$2)',
                                              `$3')')')dnl
define(`dquote', ``$@@'')
@result{}
foreach(`macro', (dquote(m4symbols)),
        `regexp(macro, `.*if.*', ``\&',')')
@result{}ifdef,ifelse,shift,
@end example

The example had to use a helper @code{quote} to ensure that the output
from @code{m4symbols} was double quoted; without it, the macro would have
gone into an infinite loop thanks to macros being reinvoked during the
rescanning.  Choosing @samp{()} as the list delimiters made this
example rather awkward in terms of proper quoting.  (A different
implementation can be acheived by changing @var{list} from a
parenthesized list to a quoted list; try reimplementing @code{foreach}
with these semantics yourself, then check @pxref{Answers}).

@node Debugging
@chapter How to debug macros and input

When writing macros for @code{m4}, they often do not work as intended on
the first try (as is the case with most programming languages).
Fortunately, there is support for macro debugging in @code{m4}.

@menu
* Dumpdef::                     Displaying macro definitions
* Trace::                       Tracing macro calls
* Debug Levels::                Controlling debugging output
* Debug Output::                Saving debugging output
@end menu

@node Dumpdef
@section Displaying macro definitions

@cindex displaying macro definitions
@cindex macros, displaying definitions
@cindex definitions, displaying macro
If you want to see what a name expands into, you can use the builtin
@code{dumpdef}:

@deffn {Builtin (m4)} dumpdef (@ovar{names@dots{}})
Accepts any number of arguments.  If called without any arguments,
it displays the definitions of all known names, otherwise it displays
the definitions of the @var{names} given.  The output is printed
directly to standard error, independently of the @option{--debugfile}
option (@pxref{Invoking m4}), or @code{debugfile} macro.
The output is sorted by name.  If an unknown name is encountered, a
warning is printed.

The expansion of @code{dumpdef} is void.
@end deffn

@example
$ @kbd{m4 -d}
define(`foo', `Hello world.')
@result{}
dumpdef(`foo')
@error{}foo:@tabchar{}`Hello world.'
@result{}
dumpdef(`define')
@error{}define:@tabchar{}<define>
@result{}
@end example

The last example shows how builtin macros definitions are displayed.
The definition that is dumped corresponds to what would occur if the
macro were to be called at that point, even if other definitions are
still live due to redefining a macro during argument collection.

@example
$ @kbd{m4 -d}
pushdef(`f', ``$0'1')pushdef(`f', ``$0'2')
@result{}
f(popdef(`f')dumpdef(`f'))
@error{}f:@tabchar{}``$0'1'
@result{}f2
f(popdef(`f')dumpdef(`f'))
@error{}m4:stdin:3: Warning: dumpdef: undefined macro `f'
@result{}f1
@end example

@xref{Debug Levels}, for information on controlling the details of the
display; in particular, the @samp{q} flag, implied by @option{-d} in the
example command line, has an impact.

@node Trace
@section Tracing macro calls

@cindex tracing macro expansion
@cindex macro expansion, tracing
@cindex expansion, tracing macro
It is possible to trace macro calls and expansions through the builtins
@code{traceon} and @code{traceoff}:

@deffn {Builtin (m4)} traceon (@ovar{names@dots{}})
@deffnx {Builtin (m4)} traceoff (@ovar{names@dots{}})
When called without any arguments, @code{traceon} and @code{traceoff}
will turn tracing on and off, respectively, for all macros, identical to
using the @samp{t} flag of @code{debugmode} (@pxref{Debug Levels}).
When called with arguments, only the named macros are affected, whether
or not they are currently defined.  A macro's expansion will be traced
if global tracing is on, or if the individual macro tracing flag is
set; to avoid tracing a macro, both the global flag and the macro must
have tracing off.

The expansion of @code{traceon} and @code{traceoff} is void.
@end deffn

Whenever a traced macro is called and the arguments have been collected,
the call is displayed.  If the expansion of the macro call is not void,
the expansion can be displayed after the call.  The output is printed
to the current debug file (defaulting to standard error, @pxref{Debug
Output}).

@example
$ @kbd{m4 -d}
define(`foo', `Hello World.')
@result{}
define(`echo', `$@@')
@result{}
traceon(`foo', `echo')
@result{}
foo
@error{}m4trace: -1- foo -> `Hello World.'
@result{}Hello World.
echo(`gnus', `and gnats')
@error{}m4trace: -1- echo(`gnus', `and gnats') -> ``gnus',`and gnats''
@result{}gnus,and gnats
@end example

The number between dashes is the depth of the expansion.  It is one most
of the time, signifying an expansion at the outermost level, but it
increases when macro arguments contain unquoted macro calls.  The
maximum number that will appear between dashes is controlled by the
option @option{--nesting-limit} (or @option{-L}, @pxref{Invoking m4}).
Additionally, the option @option{--trace} (or @option{-t}) can be used
to invoke @code{traceon(@var{name})} before parsing input.

@comment options: -d-V -L3 -tifelse
@comment status: 1
@example
$ @kbd{m4 -L 3 -t ifelse}
ifelse(`one level')
@error{}m4trace: -1- ifelse
@result{}
ifelse(ifelse(ifelse(`three levels')))
@error{}m4trace: -3- ifelse
@error{}m4trace: -2- ifelse
@error{}m4trace: -1- ifelse
@result{}
ifelse(ifelse(ifelse(ifelse(`four levels'))))
@error{}m4:stdin:3: recursion limit of 3 exceeded, use -L<N> to change it
@end example

Tracing by name is an attribute that is preserved whether the macro is
defined or not.  This allows the selection of macros to trace before
those macros are defined.

@example
$ @kbd{m4 -d}
traceoff(`foo')
@result{}
traceon(`foo')
@result{}
foo
@result{}foo
define(`foo', `bar')
@result{}
foo
@error{}m4trace: -1- foo -> `bar'
@result{}bar
undefine(`foo')
@result{}
ifdef(`foo', `yes', `no')
@result{}no
indir(`foo')
@error{}m4:stdin:8: Warning: indir: undefined macro `foo'
@result{}
define(`foo', `blah')
@result{}
foo
@error{}m4trace: -1- foo -> `blah'
@result{}blah
@end example

Tracing even works on builtins.  However, @command{defn} (@pxref{Defn})
does not transfer tracing status.

@example
$ @kbd{m4 -d}
traceon(`eval', `m4_divnum')
@result{}
define(`m4_eval', defn(`eval'))
@result{}
define(`m4_divnum', defn(`divnum'))
@result{}
eval(divnum)
@error{}m4trace: -1- eval(`0') -> `0'
@result{}0
m4_eval(m4_divnum)
@error{}m4trace: -2- m4_divnum -> `0'
@result{}0
@end example

As of @acronym{GNU} M4 2.0, named macro tracing is independent of global
tracing status; calling @code{traceoff} without arguments turns off the
global trace flag, but does not turn off tracing for macros where
tracing was requested by name.  Likewise, calling @code{traceon} without
arguments will affect tracing of macros that are not defined yet.  This
behavior matches traditional implementations of @code{m4}.

@example
$ @kbd{m4 -d}
traceon
@result{}
define(`foo', `bar')
@error{}m4trace: -1- define(`foo', `bar')
@result{}
foo # traced, even though foo was not defined at traceon
@error{}m4trace: -1- foo -> `bar'
@result{}bar # traced, even though foo was not defined at traceon
traceoff(`foo')
@error{}m4trace: -1- traceoff(`foo')
@result{}
foo # traced, since global tracing is still on
@error{}m4trace: -1- foo -> `bar'
@result{}bar # traced, since global tracing is still on
traceon(`foo')
@error{}m4trace: -1- traceon(`foo')
@result{}
traceoff
@error{}m4trace: -1- traceoff
@result{}
foo # traced, since foo is now traced by name
@error{}m4trace: -1- foo -> `bar'
@result{}bar # traced, since foo is now traced by name
traceoff(`foo')
@result{}
foo # untraced
@result{}bar # untraced
@end example

However, @acronym{GNU} M4 1.4.7 and earlier had slightly different
semantics, where @code{traceon} without arguments only affected symbols
that were defined at that moment, and @code{traceoff} without arguments
stopped all tracing, even when tracing was requested by macro name.  The
addition of the macro @code{m4symbols} (@pxref{M4symbols}) in 2.0 makes it
possible to write a file that approximates the older semantics
regardless of which version of @acronym{GNU} M4 is in use.

@comment options: -d-V
@example
$ @kbd{m4}
ifdef(`m4symbols',
  `define(`traceon', `ifelse(`$#', `0', `builtin(`traceon', m4symbols)',
    `builtin(`traceon', $@@)')')dnl
define(`traceoff', `ifelse(`$#', `0',
    `builtin(`traceoff')builtin(`traceoff', m4symbols)',
    `builtin(`traceoff', $@@)')')')dnl
define(`a', `1')
@result{}
traceon # called before b is defined, so b is not traced
@result{} # called before b is defined, so b is not traced
define(`b', `2')
@error{}m4trace: -1- define
@result{}
a b
@error{}m4trace: -1- a
@result{}1 2
traceon(`b')
@error{}m4trace: -1- traceon
@error{}m4trace: -1- ifelse
@error{}m4trace: -1- builtin
@result{}
a b
@error{}m4trace: -1- a
@error{}m4trace: -1- b
@result{}1 2
traceoff # stops tracing b, even though it was traced by name
@error{}m4trace: -1- traceoff
@error{}m4trace: -1- ifelse
@error{}m4trace: -1- builtin
@error{}m4trace: -2- m4symbols
@error{}m4trace: -1- builtin
@result{} # stops tracing b, even though it was traced by name
a b
@result{}1 2
@end example

@xref{Debug Levels}, for information on controlling the details of the
display.

@node Debug Levels
@section Controlling debugging output

@cindex controlling debugging output
@cindex debugging output, controlling
The @option{--debug} option to @code{m4} (or @option{-d},
@pxref{Invoking m4}) controls the amount of details presented, when
using the macros described in the preceding sections.

The @var{flags} following the option can be one or more of the
following:

@table @code
@item a
Show the actual arguments in each macro call.  This applies to all macro
calls if the @samp{t} flag is used, otherwise only the macros covered by
calls of @code{traceon}.

@item c
Show several trace lines for each macro call.  A line is shown when the
macro is seen, but before the arguments are collected; a second line
when the arguments have been collected and a third line after the call
has completed.

@item e
Show the expansion of each macro call, if it is not void.  This applies
to all macro calls if the @samp{t} flag is used, otherwise only the
macros covered by calls of @code{traceon}.

@item f
Show the name of the current input file in each trace output line.

@item i
Print a message each time the current input file is changed, giving file
name and input line number.

@item l
Show the current input line number in each trace output line.

@item m
Print a message each time a module is manipulated (@pxref{Modules}).

@item p
Print a message when a named file is found through the path search
mechanism (@pxref{Search Path}), giving the actual file name used.

@item q
Quote actual arguments and macro expansions in the display with the
current quotes.  This affects traced macros, as well as @code{dumpdef}
output.

@item t
Trace all macro calls made in this invocation of @code{m4}.  This is
equivalent to using @code{traceon} without arguments.

@item x
Add a unique `macro call id' to each line of the trace output.  This is
useful in connection with the @samp{c} flag above.

@item V
A shorthand for all of the above flags.
@end table

As special cases, if @var{flags} starts with a @samp{+}, the remaining
flags are added to the current debug flags, and if it starts with a
@samp{-}, remaining flags are removed.  Without either of these
starting characters, @var{flags} simply replaces the previous setting.

If no flags are specified with the @option{-d} option, the default is
@samp{aeq}. Many examples in this manual show their output using
default flags.

@cindex @acronym{GNU} extensions
There is a builtin macro @code{debugmode}, which allows on-the-fly control of
the debugging output format:

@deffn {Builtin (gnu)} debugmode (@ovar{flags})
The argument @var{flags} should be a subset of the letters listed above.
If no argument is present, all debugging flags are cleared
(as if no @option{-d} was given), and with an empty argument the flags
are reset to the default of @samp{aeq}.  If an unknown flag is
encountered, an error is issued.

The expansion of @code{debugmode} is void.
@end deffn

@example
define(`foo', `FOO')
@result{}
traceon(`foo')
@result{}
debugmode()
@result{}
foo
@error{}m4trace: -1- foo -> `FOO'
@result{}FOO
debugmode
@result{}
foo
@error{}m4trace: -1- foo
@result{}FOO
debugmode(`+l')
@result{}
foo
@error{}m4trace:8: -1- foo
@result{}FOO
@end example

@node Debug Output
@section Saving debugging output

@cindex saving debugging output
@cindex debugging output, saving
@cindex output, saving debugging
@cindex @acronym{GNU} extensions
Debug and tracing output can be redirected to files using either the
@option{--debugfile} option to @code{m4} (@pxref{Invoking m4}), or with
the builtin macro @code{debugfile}:

@deffn {Builtin (gnu)} debugfile (@ovar{file})
Send all further debug and trace output to @var{file}, opened in append
mode.  If @var{file} is the empty string, debug and trace output are
discarded.  If @code{debugfile} is called without any arguments,
debug and trace output are sent to standard error.  This does not
affect warnings, error messages, or @code{errprint} and @code{dumpdef}
output, which are always sent to standard error.  If @var{file} cannot
be opened, the current debug file is unchanged, and an error is issued.

When the @option{--safer} option (@pxref{Invoking m4}) is in effect,
@var{file} must be empty or omitted, since otherwise an input file
could cause the modification of arbitrary files.

The expansion of @code{debugfile} is void.
@end deffn

@example
$ @kbd{m4 -d}
traceon(`divnum')
@result{}
divnum(`extra')
@error{}m4:stdin:2: Warning: divnum: extra arguments ignored: 1 > 0
@error{}m4trace: -1- divnum(`extra') -> `0'
@result{}0
debugfile()
@result{}
divnum(`extra')
@error{}m4:stdin:4: Warning: divnum: extra arguments ignored: 1 > 0
@result{}0
debugfile
@result{}
divnum
@error{}m4trace: -1- divnum -> `0'
@result{}0
@end example

Although the @option{--safer} option cripples @code{debugfile} to a
limited subset of capabilities, you may still use the @option{--debugfile}
option from the command line with no restrictions.

@comment options: --safer --debugfile=trace -tfoo -Dfoo=bar -d+l
@comment status: 1
@example
$ @kbd{m4 --safer --debugfile trace -t foo -D foo=bar -daelq}
foo # traced to `trace'
@result{}bar # traced to `trace'
debugfile(`file')
@error{}m4:stdin:2: debugfile: disabled by --safer
@result{}
foo # traced to `trace'
@result{}bar # traced to `trace'
debugfile()
@result{}
foo # trace discarded
@result{}bar # trace discarded
debugfile
@result{}
foo # traced to stderr
@error{}m4trace:7: -1- foo -> `bar'
@result{}bar # traced to stderr
undivert(`trace')dnl
@result{}m4trace:1: -1- foo -> `bar'
@result{}m4trace:3: -1- foo -> `bar'
@end example

@node Input Control
@chapter Input control

This chapter describes various builtin macros for controlling the input
to @code{m4}.

@menu
* Dnl::                         Deleting whitespace in input
* Changequote::                 Changing the quote characters
* Changecom::                   Changing the comment delimiters
* Changeresyntax::              Changing the regular expression syntax
* Changesyntax::                Changing the lexical structure of the input
* M4wrap::                      Saving text until end of input
@end menu

@node Dnl
@section Deleting whitespace in input

@cindex deleting whitespace in input
@deffn {Builtin (m4)} dnl
The builtin @code{dnl} reads and discards all characters, up to and
including the first newline and is often used in connection with
@code{define}, to remove the newline that follow the call to
@code{define}.  Thus

@example
define(`foo', `Macro `foo'.')dnl A very simple macro, indeed.
foo
@result{}Macro foo.
@end example

The input up to and including the next newline is discarded, as opposed
to the way comments are treated (@pxref{Comments}).
@end deffn

Usually, @code{dnl} is immediately followed by an end of line or some
other whitespace.  GNU @code{m4} will produce a warning diagnostic if
@code{dnl} is followed by an open parenthesis.  In this case, @code{dnl}
will collect and process all arguments, looking for a matching close
parenthesis.  All predictable side effects resulting from this
collection will take place.  @code{dnl} will return no output.  The
input following the matching close parenthesis up to and including the
next newline, on whatever line containing it, will still be discarded.

@node Changequote
@section Changing the quote characters

@cindex changing the quote delimiters
@cindex quote delimiters, changing the
@deffn {Builtin (m4)} changequote (@ovar{start}, @ovar{end})
The default quote delimiters can be changed with the builtin
@code{changequote}, where @var{start} is the new start-quote delimiter
and @var{end} is the new end-quote delimiter.  If any of the arguments
are missing, the default quotes (@code{`} and @code{'}) are used instead
of the void arguments.

The expansion of @code{changequote} is void.
@end deffn

@example
changequote([, ])
@result{}
define([foo], [Macro [foo].])
@result{}
foo
@result{}Macro foo.
@end example

If no single character is appropriate, @var{start} and @var{end} can be
of any length.

@example
changequote([[, ]])
@result{}
define([[foo]], [[Macro [[[foo]]].]])
@result{}
foo
@result{}Macro [foo].
@end example

Changing the quotes to the empty strings will effectively disable the
quoting mechanism, leaving no way to quote text.

@example
define(`foo', `Macro `FOO'.')
@result{}
changequote(, )
@result{}
foo
@result{}Macro `FOO'.
`foo'
@result{}`Macro `FOO'.'
@end example

There is no way in @code{m4} to quote a string containing an unmatched
left quote, except using @code{changequote} to change the current
quotes.

If the quotes should be changed from, say, @samp{[} to @samp{[[},
temporary quote characters have to be defined.  To achieve this, two
calls of @code{changequote} must be made, one for the temporary quotes
and one for the new quotes.

Neither quote string should start with a letter or @samp{_} (underscore),
as they will be confused with names in the input.  Doing so disables
the quoting mechanism.

@node Changecom
@section Changing the comment delimiters

@cindex changing comment delimiters
@cindex comment delimiters, changing
@deffn {Builtin (m4)} changecom (@ovar{start}, @ovar{end})
The default comment delimiters can be changed with the builtin
macro @code{changecom}, where @var{start} is the new start-comment
delimiter and @var{end} is the new end-comment delimiter.  If any of the
arguments are void, the default comment delimiters (@code{#} and
newline) are used instead of the void arguments.  The comment delimiters
can be of any length.

Calling @code{changecom} without any arguments disables the commenting
mechanism completely.

The expansion of @code{changecom} is void.
@end deffn

@example
define(`comment', `COMMENT')
@result{}
# A normal comment
@result{}# A normal comment
changecom(`/*', `*/')
@result{}
# Not a comment anymore
@result{}# Not a COMMENT anymore
But: /* this is a comment now */ while this is not a comment
@result{}But: /* this is a comment now */ while this is not a COMMENT
@end example

@cindex comments, copied to output
Note how comments are copied to the output, much as if they were quoted
strings.  If you want the text inside a comment expanded, quote the
start comment delimiter.

@example
define(`comment', `COMMENT')
@result{}
changecom
@result{}
# Not a comment anymore
@result{}# Not a COMMENT anymore
@end example

@node Changeresyntax
@section Changing the regular expression syntax

@cindex regular expression syntax, changing
@cindex GNU extensions
@deffn {Builtin (gnu)} changeresyntax (@var{resyntax})
By default, the @acronym{GNU} extensions @code{patsubst}, @code{regexp} and
more recently @code{renamesyms} continue to use emacs style regular
expression syntax (@pxref{Regular expression syntax}).

The @code{changeresyntax} macro expands to nothing, but changes the
default regular expression syntax used by M4 according to the value of
@var{resyntax}, equivalent to passing @var{resyntax} as the argument to
@option{--regexp-syntax} when invoking @code{m4}.  @xref{Invoking m4},
for more details.  If @var{resyntax} is empty or omitted the default
settings are reverted to emacs style.
@end deffn

Any one of the values below, case is not important, and optionally
with @kbd{-} or @kbd{ } substituted for @kbd{_} in the given names,
will set the default regular expression syntax as described in the
table below.  For example the following are all equivalent to
@samp{GNU_M4}:

@example
changeresyntax(`gnu m4')
@result{}
changeresyntax(`GNU-m4')
@result{}
changeresyntax(`Gnu_M4')
@result{}
@end example

@table @dfn
@item AWK
@xref{awk regular expression syntax}, for details.

@item BASIC
@itemx ED
@itemx POSIX_BASIC
@itemx SED
@xref{posix-basic regular expression syntax}, for details.

@item BSD_M4
@xref{posix-extended regular expression syntax}, for details.

@item EMACS
@itemx GNU_EMACS
@xref{emacs regular expression syntax}, for details.

@item EXTENDED
@itemx POSIX_EXTENDED
@xref{posix-extended regular expression syntax}, for details.

@item GNU_AWK
@itemx GAWK
@xref{gnu-awk regular expression syntax}, for details.

@item GNU_EGREP
@itemx EGREP
@xref{egrep regular expression syntax}, for details.

@item GNU_M4
@xref{emacs regular expression syntax}, for details.

@item GREP
@xref{grep regular expression syntax}, for details.

@item MINIMAL
@itemx POSIX_MINIMAL
@itemx POSIX_MINIMAL_BASIC
@xref{posix-minimal-basic regular expression syntax}, for details.

@item POSIX_AWK
@xref{posix-awk regular expression syntax}, for details.

@item POSIX_EGREP
@xref{posix-egrep regular expression syntax}, for details.
@end table

@node Changesyntax
@section Changing the lexical structure of the input

@cindex lexical structure of the input
@cindex input, lexical structure of the
@cindex syntax table
@cindex GNU extensions
@quotation
The macro @code{changesyntax} and all associated functionality is
experimental (@pxref{Experiments}).  The functionality might change in
the future.  Please direct your comments about it the same way you would
do for bugs.
@end quotation

The input to @code{m4} is read character per character, and these
characters are grouped together to form input tokens (such as macro
names, strings, comments, etc.).

Each token is parsed according to certain rules.  For example, a macro
name starts with a letter or @kbd{_} and consists of the longest
possible string of letters, @kbd{_} and digits.  But who is to decide
what characters are letters, digits, quotes, white space?  Earlier the
operating system decided, now you do.

Input characters belong to different categories:

@table @dfn
@item Letters
Characters that start a macro name.  The default is the letters as
defined by the operating system and the character @kbd{_}.

@item Digits
Characters that, together with the letters, form the remainder of a
macro name.  The default is the ten digits @kbd{0}@dots{}@kbd{9}.

@item White space
Characters that should be trimmed from the beginning of each
argument to a macro call.  The default is @kbd{SPC}, @kbd{TAB},
@kbd{newline} and possibly others as defined by the operating system.

@item Open parenthesis
Characters that open the argument list of a macro call.  Default
is @kbd{(}.

@item Close parenthesis
Characters that close the argument list of a macro call.  Default is
@kbd{)}.

@item Argument separator
Characters that separate the arguments of a macro call.  Default
is @kbd{,}.

@item Dollar
Characters that can introduce an argument reference in the body of a
macro.  Default is @kbd{$}.

@item Other
Characters that have no special syntactical meaning to @code{m4}.
Default is all characters except those in the categories above.

@item Active
Characters that themselves, alone, form macro names.  No default.

@item Escape
Characters that must precede macro names for them to be recognized.  No
default.

@end table

@noindent
Each character can, besides the basic syntax category, have some syntax
attributes.  These are:

@table @dfn
@item Left quote
The characters that start a quoted string.  Default is @kbd{`}.  Basic
syntax category is `Other'.

@item Right quote
The characters that end a quoted string.  Default is @kbd{'}.  Basic
syntax category is `Other'.

@item Begin comment
The characters that begin a comment.  Default is @kbd{#}.  Basic syntax
category is `Other'.

@item End comment
The characters that end a comment.  Default is @kbd{newline}.  Basic
syntax category is `White space'.
@end table

@noindent

The builtin macro @code{changesyntax} is used to change the way
@code{m4} parses the input stream into tokens.

@deffn {Builtin (gnu)} changesyntax (@var{syntax-spec}, @dots{})
The @var{syntax-spec} is a string, whose first character determines the
syntax category of the other characters.   Character ranges are expanded
as for @ref{Translit}.  If there are no other
characters, @emph{all} characters are given the syntax code.

The characters for the syntax categories are:

@table @kbd
@item W
Letters
@item D
Digits
@item S
White space
@item (
Open parenthesis
@item )
Close parenthesis
@item ,
Argument separator
@item $
Dollar
@item O
Other
@item @@
Escape
@item A
Active
@item L
Left quote
@item R
Right quote
@item B
Begin comment
@item E
End comment
@item
@end table

The expansion of @code{changesyntax} is void.

The builtin macro @code{changesyntax} is recognized only when given
arguments.
@end deffn

@noindent
With @code{changesyntax} we can modify the meaning of a word.

@example
define(`test.1', `TEST ONE')
@result{}
__file__
@result{}stdin
changesyntax(`O_', `W.')
@result{}
__file__
@result{}__file__
test.1
@result{}TEST ONE
@end example

@noindent
Another possibility is to change the syntax of a macro call.

@example
define(`test', `$#')
@result{}
test(a, b, c)
@result{}3
changesyntax(`(<', `,|', `)>', `O(,)')
@result{}
test(a, b, c)
@result{}0(a, b, c)
test<a|b|c>
@result{}3
@end example

@noindent
Leading spaces are always removed from macro arguments in @code{m4}, but
by changing the syntax categories we can avoid it.

@example
define(`test', `$1$2$3')
@result{}
test(`a', `b', `c')
@result{}abc
changesyntax(`O         ')
@result{}
test(a, b, c)
@result{}a b c
@end example

@noindent
It is possible to redefine the @samp{$} used to indicate macro arguments
in user defined macros.

@example
define(`argref', `Dollar: $#, Question: ?#')
@result{}
argref(1, 2, 3)
@result{}Dollar: 3, Question: ?#
changesyntax(`$?', `O$')
@result{}
argref(1,2,3)
@result{}Dollar: $#, Question: 3
@end example

@noindent
Dollar class syntax elements are copied to the output if there is no
valid expansion.

@example
define(`escape', `$?`'1$?1?')
@result{}
changesyntax(`$?')
@result{}
escape(foo)
@result{}$?1$foo?
@end example

Macro calls can be given a @TeX{} or Texinfo like syntax using an
escape.  If one or more characters are defined as escapes macro names
are only recognized if preceded by an escape character.

If the escape is not followed by what is normally a word (a letter
optionally followed by letters and/or numerals), that single character
is returned as a macro name.

As always, words without a macro definition cause no error message.
They and the escape character are simply output.

@example
define(`foo', `bar')
@result{}
changesyntax(`@@@@')
@result{}
foo
@result{}foo
@@foo
@result{}bar
@@changesyntax(`@@\', `O@@')
@result{}
foo
@result{}foo
@@foo
@result{}@@foo
\foo
@result{}bar
define(`#', `No comment')
@result{}define(#, No comment)
\define(`#', `No comment')
@result{}
\# \foo # Comment \foo
@result{}No comment bar # Comment \foo
@end example

Active characters are known from @TeX{}.  In @code{m4} an active
character is always seen as a one-letter word, and so, if it has a macro
definition, the macro will be called.

@example
define(`@@', `TEST')
@result{}
@@
@result{}@@
changesyntax(`A@@')
@result{}
@@
@result{}TEST
@end example

There is obviously an overlap with @code{changecom} and
@code{changequote}.  Comment delimiters and quotes can now be defined in
two different ways.  To avoid incompatibilities, if the quotes are set
with @code{changequote}, all characters marked in the syntax table as
quotes will be unmarked, leaving only one set of defined quotes as
before.  Since the quotes are syntax attributes rather than syntax
categories, the old quotes simply revert to their old category.  If the
quotes are set with @code{changesyntax}, other characters marked as
quotes are left untouched, resulting in at least two sets of quotes.
This applies to comment delimiters as well, @emph{mutatis mutandis}.

@example
define(`test', `TEST')
@result{}
changesyntax(`L<', `R>')
@result{}
<test>
@result{}test
`test>
@result{}test
changequote(<[>, `]')
@result{}
<test>
@result{}<TEST>
[test]
@result{}test
@end example

@noindent
If categories, that form single character tokens, contain several
characters, all are treated as equal.  Any open parenthesis will match
any close parenthesis, etc.

@example
changesyntax(`(@{<', `)@}>', `,;:', `O(,)')
@result{}
eval@{2**4-1; 2 : 8>
@result{}00001111
@end example

@noindent
This is not so for long quotes, which cannot be matched by single
character quote and vice versa.  The same goes for comment delimiters.

@example
define(`test', `==$1==')
@result{}
changequote(`<<', `>>')
@result{}
changesyntax(<<L[>>, <<R]>>)
@result{}
test(<<testing]>>)
@result{}==testing]==
test([testing>>])
@result{}==testing>>==
test([<<testing>>])
@result{}==testing==
@end example

@noindent
Note how it is possible to have both long and short quotes, if
@code{changequote} is used before @code{changesyntax}.

The syntax table is initialized to be backwards compatible, so if you
never call @code{changesyntax}, nothing will have changed.

Debugging output continue to use @kbd{(}, @kbd{,} and @kbd{)} to show
macro calls.

@node M4wrap
@section Saving text until end of input

@cindex saving input
@cindex input, saving
It is possible to `save' some text until the end of the normal input has
been seen.  Text can be saved, to be read again by @code{m4} when the
normal input has been exhausted.  This feature is normally used to
initiate cleanup actions before normal exit, e.g., deleting temporary
files.

@deffn {Builtin (m4)} m4wrap (@var{string}, @dots{})
To save input text, use the builtin @code{m4wrap}:
which stores @var{string} and the rest of the arguments in a safe place,
to be reread when end of input is reached.
@end deffn

@example
define(`cleanup', `This is the `cleanup' actions.
')
@result{}
m4wrap(`cleanup')
@result{}
This is the first and last normal input line.
@result{}This is the first and last normal input line.
^D
@result{}This is the cleanup actions.
@end example

The saved input is only reread when the end of normal input is seen, and
not if @code{m4exit} is used to exit @code{m4}.

It is safe to call @code{m4wrap} from saved text, but then the order in
which the saved text is reread is undefined.  If @code{m4wrap} is not used
recursively, the saved pieces of text are reread in the opposite order
in which they were saved (LIFO---last in, first out).

@node File Inclusion
@chapter File inclusion

@cindex file inclusion
@cindex inclusion, of files

@code{m4} allows you to include named files at any point in the input.

@menu
* Include::                     Including named files
* Search Path::                 Searching for include files
@end menu

@node Include
@section Including named files

@deffn {Builtin (m4)} include (@var{filename})
@deffnx {Builtin (m4)} sinclude (@var{filename})
These two builtin macros are for including files.  Both cause the file
named @var{filename} to be read by @code{m4}.  When the end of the file
is reached, input is resumed from the previous input file.

The expansion of @code{include} and @code{sinclude} is therefore the
contents of @var{filename}.

It is an error for an @code{include}d file not to exist.  If you do
not want error messages about non-existent files, @code{sinclude} can
be used to include a file, if it exists, expanding to nothing if it
does not.

The builtin macros @code{include} and @code{sinclude} are recognized
only when given arguments.
@end deffn

@comment status: 1
@example
include(`n')
@result{}
@error{}m4:stdin:1: include: cannot open `n': No such file or directory
sinclude(`n')
@result{}
@end example

Assume in the following that the file @file{incl.m4} contains the lines:
@comment file: incl.m4
@example
Include file start
foo
Include file end
@end example
@noindent
Normally file inclusion is used to insert the contents of a file
into the input stream.  The contents of the file will be read by
@code{m4} and macro calls in the file will be expanded:

@example
define(`foo', `FOO')
@result{}
include(`incl.m4')
@result{}Include file start
@result{}FOO
@result{}Include file end
@result{}
@end example

The fact that @code{include} and @code{sinclude} expand to the contents
of the file can be used to define macros that operate on entire files.
Here is an example, which defines @samp{bar} to expand to the contents
of @file{incl.m4}:

@example
define(`bar', include(`incl.m4'))
@result{}
This is `bar':  >>bar<<
@result{}This is bar:  >>Include file start
@result{}foo
@result{}Include file end
@result{}<<
@end example

This use of @code{include} is not trivial, though, as files can contain
quotes, commas and parentheses, which can interfere with the way the
@code{m4} parser works.

In GNU @code{m4}, an alternative method of reading files is using
@ref{Undivert} on a named file.

@node Search Path
@section Searching for include files

@cindex search path for included files
@cindex included files, search path for
@cindex GNU extensions
GNU @code{m4} allows included files to be found in other directories
than the current working directory.

If the @option{--prepend-include} or @option{-B} option was provided
(@pxref{Invoking m4}), those directories are searched first, in reverse
order that those options were listed on the command line.  Then
@code{m4} looks in the current working directory.  Next comes the
directories specified with the @option{--include} or @option{-I} option
will be searched, in the order found on the command line.  Finally, if
the @env{M4PATH} environment variable is set, it is expected to contain
a colon-separated list of directories, which will be searched in order.

If the automatic search for include-files causes trouble, the @samp{p}
debug flag (@pxref{Debug Levels}) can help isolate the problem.

@node Diversions
@chapter Diverting and undiverting output

Diversions are a way of temporarily saving output.  The output of
@code{m4} can at any time be diverted to a temporary file, and be
reinserted into the output stream, @dfn{undiverted}, again at a later
time.

Numbered diversions are counted from 0 upwards, diversion number 0
being the normal output stream.  The number of simultaneous diversions
is limited mainly by the memory used to describe them, because GNU
@code{m4} tries to keep diversions in memory.  However, there is a
limit to the overall memory usable by all diversions taken altogether
(512K, currently).  When this maximum is about to be exceeded,
a temporary file is opened to receive the contents of the biggest
diversion still in memory, freeing this memory for other diversions.
So, it is theoretically possible that the number of diversions be
limited by the number of available file descriptors.

@c FIXME: need some explanation here why this is a useful feature, not
@c just how you use it.

@menu
* Divert::                      Diverting output
* Undivert::                    Undiverting output
* Divnum::                      Diversion numbers
* Cleardiv::                    Discarding diverted text
@end menu

@node Divert
@section Diverting output

@cindex diverting output to files
@cindex output, diverting to files
@cindex files, diverting output to
@deffn {Builtin (m4)} divert
@deffnx {Builtin (m4)} divert (@ovar{number})
Output is diverted using @code{divert} where @var{number} is the
diversion to be used.  If @var{number} is left out, it is assumed to be
zero.

The expansion of @code{divert} is void.
@end deffn

When all the @code{m4} input will have been processed, all existing
diversions are automatically undiverted, in numerical order.

@example
divert(1)
This text is diverted.
divert
@result{}
This text is not diverted.
@result{}This text is not diverted.
^D
@result{}
@result{}This text is diverted.
@end example

Several calls of @code{divert} with the same argument do not overwrite
the previous diverted text, but append to it.

If output is diverted to a non-existent diversion, it is simply
discarded.  This can be used to suppress unwanted output.  A common
example of unwanted output is the trailing newlines after macro
definitions.  Here is how to avoid them.

@example
divert(-1)
define(`foo', `Macro `foo'.')
define(`bar', `Macro `bar'.')
divert
@result{}
@end example

This is a common programming idiom in @code{m4}.

@node Undivert
@section Undiverting output

@deffn {Builtin (m4)} undivert
@deffnx {Builtin (m4)} undivert (@ovar{number@dots{}})
Diverted text can be undiverted explicitly using the builtin
@code{undivert},  which reinserts the diverted output given by the
arguments into the current output stream, in the order given.  If no
arguments are supplied, all diversions are undiverted, in numerical
order.

@c FIXME: Explain what happens when undiverting all to else than 0.

The expansion of @code{undivert} is void.
@end deffn

@example
divert(1)
This text is diverted.
divert
@result{}
This text is not diverted.
@result{}This text is not diverted.
undivert(1)
@result{}
@result{}This text is diverted.
@result{}
@end example

Notice the last two blank lines.  One of them comes from the newline
following @code{undivert}, the other from the newline that followed the
@code{divert}!  A diversion often starts with a blank line like this.

When diverted text is undiverted, it is @emph{not} reread by @code{m4},
but rather copied directly to the current output, and it is therefore
not an error to undivert into a diversion.

When a diversion has been undiverted, the diverted text is discarded,
and it is not possible to bring back diverted text more than once.

@example
divert(1)
This text is diverted first.
divert(0)undivert(1)dnl
@result{}
@result{}This text is diverted first.
undivert(1)
@result{}
divert(1)
This text is also diverted but not appended.
divert(0)undivert(1)dnl
@result{}
@result{}This text is also diverted but not appended.
@end example

Attempts to undivert the current diversion are silently ignored.

@cindex GNU extensions
@cindex file inclusion
@cindex inclusion, of files
GNU @code{m4} allows named files to be undiverted.  Given a non-numeric
argument, the contents of the file named will be copied, uninterpreted, to
the current output.  This complements the builtin @code{include}
(@pxref{Include}).  To illustrate the difference, assume the file
@file{foo} contains:

@comment file: foo
@example
bar
@end example

@noindent
then

@example
define(`bar', `BAR')
@result{}
undivert(`foo')
@result{}bar
@result{}
include(`foo')
@result{}BAR
@result{}
@end example

@node Divnum
@section Diversion numbers

@cindex diversion numbers
@deffn {Builtin (m4)} divnum
The builtin @code{divnum} expands to the number of the current
diversion.
@end deffn

@example
Initial divnum
@result{}Initial 0
divert(1)
Diversion one: divnum
divert(2)
Diversion two: divnum
divert
@result{}
^D
@result{}
@result{}Diversion one: 1
@result{}
@result{}Diversion two: 2
@end example

The last call of @code{divert} without arguments is necessary because the
undiverted text would otherwise be diverted itself.

@node Cleardiv
@section Discarding diverted text

@cindex discarding diverted text
@cindex diverted text, discarding
Often it is not known, when output is diverted, whether the diverted
text is actually needed.  Since all non-empty diversion are brought back
on the main output stream when the end of input is seen, a method of
discarding a diversion is needed.  If all diversions should be
discarded, the easiest is to end the input to @code{m4} with
@samp{divert(-1)} followed by an explicit @samp{undivert}:

@example
divert(1)
Diversion one: divnum
divert(2)
Diversion two: divnum
divert(-1)
undivert
^D
@end example

@noindent
No output is produced at all.

Clearing selected diversions can be done with the following macro:

@example
define(`cleardivert',
`pushdef(`_n', divnum)divert(`-1')undivert($@@)divert(_n)popdef(`_n')')
@result{}
@end example

It is called just like @code{undivert}, but the effect is to clear the
diversions, given by the arguments.  (This macro has a nasty bug!  You
should try to see if you can find it and correct it.   @xref{Answers}.)

@node Modules
@chapter Extending M4 with dynamic runtime modules

@cindex modules
@acronym{GNU} M4 1.4.x had a monolithic architecture.  All of its
functionality was contained in a single binary, and additional macros
could be added only by writing more code in the M4 language, or at the
extreme by hacking the sources and recompiling the whole thing to make
a custom M4 installation.

Starting with release 2.0, M4 uses Libtool's @code{libltdl} facilities
(@pxref{Using libltdl, ,libltdl ,libtool , The GNU Libtool Manual})
to move all of M4's builtins out to pluggable modules.  Unless compile
time options are set to change the default build, the installed M4 2.0
binary is virtually identical to 1.4.x, supporting the same builtins.
However, an optional module can be loaded into the running M4 interpreter
to provide a new @code{load} builtin.  This facilitates runtime
extension of the M4 builtin macro list using compiled C code linked
against a new @file{libm4.so}.

For example, you might want to add a @code{setenv} builtin to M4, to
use before invoking @code{esyscmd}.  We might write a @file{setenv.c}
something like this:

@comment ignore
@example
#include "m4module.h"

M4BUILTIN(setenv);

m4_builtin m4_builtin_table[] =
  @{
    /* name     handler         macros blind minargs maxargs */
    @{ "setenv", builtin_setenv, false, false,   3,     4 @},

    @{ NULL,     NULL,           false, false,    0,     0 @}
@};

/**
 * setenv(NAME, VALUE, [OVERWRITE])
 **/
M4BUILTIN_HANDLER (setenv)
@{
  int overwrite = 1;

  if (argc >= 4)
    if (!m4_numeric_arg (context, argc, argv, 3, &overwrite))
      return;

  setenv (M4ARG (1), M4ARG (2), overwrite);
@}
@end example

Then, having compiled and linked the module, in (somewhat contrived)
M4 code:

@comment ignore
@example
$ M4MODPATH=`pwd` m4 --load-module=setenv
setenv(`PATH', `/sbin:/bin:/usr/sbin:/usr/bin')
esyscmd(`ifconfig -a')
@end example

Or instead of loading the module from the M4 invocation, you can use
the new @code{load} builtin:

@comment ignore
@example
$ M4MODPATH=`pwd` m4 --load-module=load
load(`setenv')
setenv(`PATH', `/sbin:/bin:/usr/sbin:/usr/bin')
@end example

Also, at build time, you can choose which modules to build into
the core (so that they will be available without dynamic loading).
SUSv3 M4 functionality is contained in the module @samp{m4}, @acronym{GNU}
extensions in the module @samp{gnu}, the @code{load} builtin in the
module @samp{load} and so on.

We hinted earlier that the @code{m4} and @code{gnu} modules are
preloaded into the installed M4 binary, but it is possible to install
a @emph{thinner} binary minus GNU extensions, for example, by
configuring the distribution with @samp{./configure
--with-modules=m4}.  For a binary built with that option to understand
code that uses @acronym{GNU} extensions, you must then run @samp{m4
--load-module=gnu}.  It is also possible to build a @emph{fatter}
binary with additional modules preloaded: adding, say, the @code{load}
builtin using @samp{./configure --with-modules="m4 gnu load"}.

@acronym{GNU} M4 now has a facility for defining additional builtins without
recompiling the sources.  In actual fact, all of the builtins provided
by @acronym{GNU} M4 are loaded from such modules.  All of the builtin
descriptions in this manual are annotated with the module from which
they are loaded -- mostly from the module @samp{m4}.

When you start @acronym{GNU} M4, the modules @samp{m4} and @samp{gnu} are
loaded by default.  If you supply the @option{-G} option at startup, the
module @samp{traditional} is loaded instead of @samp{gnu}.
@xref{Compatibility}, for more details on the differences between these
two modes of startup.

@menu
* M4modules::                   Listing loaded modules
* Load::                        Loading additional modules
* Unload::                      Removing loaded modules
* Standard Modules::            Standard bundled modules
@end menu

@node M4modules
@section Listing loaded modules

@deffn {Builtin (load)} m4modules
Expands to a quoted ordered list of currently loaded modules,
with the most recently loaded module at the front of the list.  Loading
a module multiple times will not affect the order of this list, the
position depends on when the module was @emph{first} loaded.
@end deffn

For example, if @acronym{GNU} @code{m4} is started with the
@option{-mload} option to load the module @samp{load} and make this
builtin available, @code{m4modules} will yield the following:

@comment options: -m load
@example
$ @kbd{m4 -m load}
m4modules
@result{}load,gnu,m4
@end example

@node Load
@section Loading additional modules

@deffn {Builtin (load)} load (@var{module-name})
@var{module-name} will be searched for along the module search path
(@pxref{Standard Modules}) and loaded if found.  Loading a module
consists of running its initialization function (if any) and then adding
any macros it provides to the internal table.

The macro @code{load} is recognized only with parameters.
@end deffn

Once the @code{load} module has successfully loaded, use of the
@samp{load} macro is entirely equivalent to the @option{-m} command line
option.

@comment ignore
@example
m4modules
@result{}load,gnu,m4
load(`mymodule')
@result{}
m4modules
@result{}mymodule,load,gnu,m4
@end example

@node Unload
@section Removing loaded modules

@deffn {Builtin (load)} unload (@var{module-name})
Any loaded modules that can be listed by the @code{modules} macro can be
removed by naming them as the @var{module-name} parameter of the
@code{unload} macro.  Unloading a module consists of removing all of the
macros it provides from the internal table of visible macros, and
running the module's finalization method (if any).

The macro @code{unload} is recognized only with parameters.
@end deffn

@node Standard Modules
@section Standard bundled modules

GNU @code{m4} ships with several bundled modules as standard.  By
convention these modules define a text macro that can be tested with
@samp{ifdef} when they have loaded.

@table @code
@item m4
Provides all of the builtins defined by System V @code{m4}.  This module
is always loaded -- GNU m4 would only be a very slow version of
@samp{cat} without the builtins supplied by this module.

@item gnu
Provides all of the GNU extensions, as defined by GNU @code{m4} upto
release 1.4.  In addition to the @samp{__gnu__} text macro, this module
also defines either @samp{__unix__} or @samp{__windows__} as
appropriate, and the following:

@deffn {Macro (gnu)} __m4_version__
This macro expand to the release version number of the running GNU
@code{m4} executable.
@end deffn

This module is always loaded, unless the @option{-G} option is supplied
at startup.

@item traditional
This module defines a single text macro for compatibility with System V
@code{m4}, and is loaded instead of the @samp{gnu} module if @option{-G}
is specified.

@deffn {Macro (traditional)} unix
Expands to the empty string.
@end deffn

@item load
This module supplies the builtins required to use modules from within a
GNU @code{m4} program.  @xref{Modules}, for more details.  The module
also defines the following macro:

@deffn {Macro (load)} __modules__
Expands to the empty string.
@end deffn

@item mpeval
This module provides the implementation for the experimental
@code{mpeval} feature.  If the host machine does not have the GNU gmp
library, the builtin will generate an error if called.  @xref{Mpeval},
for more details.  The module also defines the following macro:

@deffn {Macro (mpeval)} __gmp__
Expands to the empty string.
@end deffn

@end table

@node Text handling
@chapter Macros for text handling

There are a number of builtins in @code{m4} for manipulating text in
various ways, extracting substrings, searching, substituting, and so on.

@menu
* Len::                         Calculating length of strings
* Index macro::                 Searching for substrings
* Regexp::                      Searching for regular expressions
* Substr::                      Extracting substrings
* Translit::                    Translating characters
* Patsubst::                    Substituting text by regular expression
* Format::                      Formatting strings (printf-like)
@end menu

@node Len
@section Calculating length of strings

@cindex length of strings
@cindex strings, length of
@deffn {Builtin (m4)} len (@var{string})
The length of a string can be calculated by @code{len},
which expands to the length of @var{string}, as a decimal number.

The builtin macro @code{len} is recognized only when given arguments.
@end deffn

@example
len()
@result{}0
len(`abcdef')
@result{}6
@end example

@node Index macro
@section Searching for substrings

@deffn {Builtin (m4)} index (@var{string}, @var{substring})
Searching for substrings is done with @code{index},
which expands to the index of the first occurrence of @var{substring} in
@var{string}.  The first character in @var{string} has index 0.  If
@var{substring} does not occur in @var{string}, @code{index} expands to
@samp{-1}.

The builtin macro @code{index} is recognized only when given arguments.
@end deffn

@example
index(`gnus, gnats, and armadillos', `nat')
@result{}7
index(`gnus, gnats, and armadillos', `dag')
@result{}-1
@end example

@node Regexp
@section Searching for regular expressions

@cindex regular expressions
@cindex GNU extensions
@deffn {Builtin (gnu)} regexp (@var{string}, @var{regexp}, @var{resyntax})
@deffnx {Builtin (gnu)} regexp (@var{string}, @var{regexp}, @
  @ovar{replacement}, @ovar{resyntax})
Searching for regular expressions is done with the builtin
@code{regexp}, which searches for @var{regexp} in @var{string}.  The
syntax of regular expressions is similar to that of Perl, @acronym{GNU} Awk
and Egrep: so called ``Extended Regular Expression''.

If @var{replacement} is omitted, @code{regexp} expands to the index of
the first match of @var{regexp} in @var{string}.  If @var{replacement}
is specified and matches, then it expands into @var{replacement}. If
@var{regexp} does not match anywhere in @var{string}, it expands to -1.

If @var{resyntax} is given, the particular flavor of regular
expression understood with respect to @var{regexp} can be changed from
the current default.  @xref{Changeresyntax}, for details of the values
that can be given for this argument.

The builtin macro @code{regexp} is recognized only when given arguments.
@end deffn

@example
regexp(`GNUs not Unix', `\<[a-z]\w+')
@result{}5
regexp(`GNUs not Unix', `\<Q\w*')
@result{}-1
@end example

If @var{replacement} is supplied, @code{regexp} changes the expansion
to this argument, with @samp{\@var{n}} substituted by the text
matched by the @var{n}th parenthesized sub-expression of @var{regexp},
@samp{\&} being the text the entire regular expression matched.

@example
regexp(`GNUs not Unix', `\w\(\w+\)$', `*** \& *** \1 ***')
@result{}*** Unix *** nix ***
@end example

If @var{resyntax} is given, @var{regexp} must be given according to
the syntax chosen, though the default regular expression syntax
remains unchanged for other invocations:

@example
regexp(`GNUs not Unix', `\w(\w+)$', `*** \& *** \1 ***',
       `POSIX_EXTENDED')
@result{}*** Unix *** nix ***
@end example

Occasionally, you might want to pass an @var{resyntax} argument
without wishing to give @var{replacement}.  If the @strong{last}
argument is a valid @var{resyntax} it is used as such whether
or not a @var{replacement} argument is also given:

@example
regexp(`GNUs not Unix', `\w(\w+)$', `POSIX_EXTENDED')
@result{}9
@end example

@node Substr
@section Extracting substrings

@cindex extracting substrings
@cindex substrings, extracting
@deffn {Builtin (m4)} substr (@var{string}, @var{from}, @ovar{length})
Substrings are extracted with @code{substr}, which expands to the
substring of @var{string}, which starts at index @var{from}, and extends
for @var{length} characters, or to the end of @var{string}, if
@var{length} is omitted.  The starting index of a string is always 0.

@example
substr(`gnus, gnats, and armadillos', 6)
@result{}gnats, and armadillos
substr(`gnus, gnats, and armadillos', 6, 5)
@result{}gnats
@end example

The builtin macro @code{substr} is recognized only when given arguments.
@end deffn

@node Translit
@section Translating characters

@cindex translating characters
@cindex characters, translating
@deffn {Builtin (m4)} translit (@var{string}, @var{chars}, @var{replacement})
Character translation is done with @code{translit}, which expands to
@var{string}, with each character that occurs in @var{chars} translated
into the character from @var{replacement} with the same index.

If @var{replacement} is shorter than @var{chars}, the excess characters
are deleted from the expansion.  If @var{replacement} is omitted, all
characters in @var{string}, that are present in @var{chars} are deleted
from the expansion.

Both @var{chars} and @var{replacement} can contain character-ranges,
e.g., @samp{a-z} (meaning all lowercase letters) or @samp{0-9} (meaning
all digits).  To include a dash @samp{-} in @var{chars} or
@var{replacement}, place it first or last.

The builtin macro @code{translit} is recognized only when given
arguments.
@end deffn

It is not an error for the last character in the range to be `smaller'
than the first.  In that case, the range runs backwards, i.e.,
@samp{9-0} means the string @samp{9876543210}.

@example
translit(`GNUs not Unix', `A-Z')
@result{}s not nix
translit(`GNUs not Unix', `a-z', `A-Z')
@result{}GNUS NOT UNIX
translit(`GNUs not Unix', `A-Z', `z-a')
@result{}tmfs not fnix
@end example

The first example deletes all uppercase letters, the second converts
lowercase to uppercase, and the third `mirrors' all uppercase letters,
while converting them to lowercase.  The two first cases are by far the
most common.

@node Patsubst
@section Substituting text by regular expression

@cindex regular expressions
@cindex pattern substitution
@cindex substitution by regular expression
@cindex GNU extensions
@deffn {Builtin (gnu)} patsubst (@var{string}, @var{regexp}, @
  @ovar{replacement}, @ovar{resyntax})
Global substitution in a string is done by @code{patsubst}, which
searches @var{string} for matches of @var{regexp}, and substitutes
@var{replacement} for each match.

If @var{resyntax} is given, the particular flavor of regular
expression understood with respect to @var{regexp} can be changed from
the current default.  @xref{Changeresyntax}, for details of the values
that can be given for this parameter.

The parts of @var{string} that are not covered by any match of
@var{regexp} are copied to the expansion.  Whenever a match is found, the
search proceeds from the end of the match, so a character from
@var{string} will never be substituted twice.  If @var{regexp} matches a
string of zero length, the start position for the search is incremented,
to avoid infinite loops.

When a replacement is to be made, @var{replacement} is inserted into
the expansion, with @samp{\@var{n}} substituted by the text matched by
the @var{n}th parenthesized sub-expression of @var{regexp}, @samp{\&}
being the text the entire regular expression matched.

The @var{replacement} argument can be omitted, in which case the text
matched by @var{regexp} is deleted.

The builtin macro @code{patsubst} is recognized only when given
arguments.
@end deffn

When used with two arguments, while @code{regexp} returns the position
of the match, @code{patsubst} deletes it:

@example
patsubst(`GNUs not Unix', `^', `OBS: ')
@result{}OBS: GNUs not Unix
patsubst(`GNUs not Unix', `\<', `OBS: ')
@result{}OBS: GNUs OBS: not OBS: Unix
patsubst(`GNUs not Unix', `\w*', `(\&)')
@result{}(GNUs)() (not)() (Unix)()
patsubst(`GNUs not Unix', `\w+', `(\&)')
@result{}(GNUs) (not) (Unix)
patsubst(`GNUs not Unix', `[A-Z][a-z]+')
@result{}GN not @comment
@end example

Here is a slightly more realistic example, which capitalizes individual
words or whole sentences, by substituting calls of the macros
@code{upcase} and @code{downcase} into the strings.

@example
define(`upcase',   `translit(`$*', `a-z', `A-Z')')dnl
define(`downcase', `translit(`$*', `A-Z', `a-z')')dnl
define(`capitalize1',
       `regexp(`$1', `^\(\w\)\(\w*\)',
               `upcase(`\1')`'downcase(`\2')')')dnl
define(`capitalize',
       `patsubst(`$1', `\w+', `capitalize1(`\&')')')dnl
capitalize(`GNUs not Unix')
@result{}Gnus Not Unix
@end example

If @var{resyntax} is given, @var{regexp} must be given according to
the syntax chosen, though the default regular expression syntax
remains unchanged for other invocations:

@example
define(`epatsubst',
       `builtin(`patsubst', `$1', `$2', `$3', `POSIX_EXTENDED')')dnl
epatsubst(`bar foo baz Foo', `(\w*) (foo|Foo)', `_\1_')
@result{}_bar_ _baz_
patsubst(`bar foo baz Foo', `\(\w*\) \(foo\|Foo\)', `_\1_')
@result{}_bar_ _baz_
@end example

While @code{regexp} replaces the whole input with the replacement as
soon as there is a match, @code{patsubst} replaces each
@emph{occurrence} of a match and preserves non matching pieces:

@example
define(`patreg',
`patsubst($@@)
regexp($@@)')dnl
patreg(`bar foo baz Foo', `foo\|Foo', `FOO')
@result{}bar FOO baz FOO
@result{}FOO
patreg(`aba abb 121', `\(.\)\(.\)\1', `\2\1\2')
@result{}bab abb 212
@result{}bab
@end example

@node Format
@section Formatting strings (printf-like)

@cindex formatted output
@cindex output, formatted
@cindex GNU extensions
@deffn {Builtin (gnu)} format (@var{format-string}, @dots{})
Formatted output can be made with @code{format}, which works much like
the C function @code{printf}.  The first argument is a format string,
which can contain @samp{%} specifications, and the expansion of
@code{format} is the formatted string.

The builtin macros @code{format} is recognized only when given arguments.
@end deffn

Its use is best described by a few examples:

@example
define(`foo', `The brown fox jumped over the lazy dog')
@result{}
format(`The string "%s" uses %d characters', foo, len(foo))
@result{}The string "The brown fox jumped over the lazy dog" uses 38 characters
format(`%.0f', `56789.9876')
@result{}56790
len(format(`%-*X', `5000', `1'))
@result{}5000
@end example

Using the @code{forloop} macro defined in @xref{Forloop}, this
example shows how @code{format} can be used to produce tabular output.

@comment ignore
@example
forloop(`i', 1, 10, `format(`%6d squared is %10d
', i, eval(i**2))')
@result{}     1 squared is          1
@result{}     2 squared is          4
@result{}     3 squared is          9
@result{}     4 squared is         16
@result{}     5 squared is         25
@result{}     6 squared is         36
@result{}     7 squared is         49
@result{}     8 squared is         64
@result{}     9 squared is         81
@result{}    10 squared is        100
@end example

The builtin @code{format} is modeled after the ANSI C @samp{printf}
function, and supports the normal @samp{%} specifiers: @samp{c},
@samp{s}, @samp{d}, @samp{o}, @samp{x}, @samp{X}, @samp{u}, @samp{e},
@samp{E}, @samp{f}, @samp{F}, @samp{g}, and @samp{G}; it supports
field widths and precisions, and the
modifiers @samp{+}, @samp{-}, @samp{@w{ }}, @samp{0}, @samp{#}, @samp{h} and
@samp{l}.  For more details on the functioning of @code{printf}, see the
C Library Manual.

@c FIXME - format still needs some improvements.

@node Arithmetic
@chapter Macros for doing arithmetic

@cindex arithmetic
@cindex integer arithmetic
Integer arithmetic is included in @code{m4}, with a C-like syntax.  As
convenient shorthands, there are builtins for simple increment and
decrement operations.

@menu
* Incr::                        Decrement and increment operators
* Eval::                        Evaluating integer expressions
* Mpeval::                      Multiple precision arithmetic
@end menu

@node Incr
@section Decrement and increment operators

@cindex decrement operator
@cindex increment operator
@deffn {Builtin (m4)} incr (@var{number})
@deffnx {Builtin (m4)} decr (@var{number})
Increment and decrement of integers are supported using the builtins
@code{incr} and @code{decr}, which expand to the numerical value of
@var{number}, incremented, or decremented, respectively, by one.

@example
incr(4)
@result{}5
decr(7)
@result{}6
@end example

The builtin macros @code{incr} and @code{decr} are recognized only when
given arguments.
@end deffn

@node Eval
@section Evaluating integer expressions

@cindex integer expression evaluation
@cindex evaluation, of integer expressions
@cindex expressions, evaluation of integer
@deffn {Builtin (m4)} eval (@var{expression}, @ovar{radix}, @ovar{width})
Integer expressions are evaluated with @code{eval}, which expands to the
value of @var{expression}.

Expressions can contain the following operators, listed in order of
decreasing precedence.

@table @code
@item -
Unary minus
@item **
Exponentiation
@item *  /  %  :
Multiplication, division, modulo and ratio
@item +  -
Addition and subtraction
@item <<  >>
Shift left or right
@item ==  !=  >  >=  <  <=
Relational operators
@item !
Logical negation
@item ~
Bitwise negation
@item &
Bitwise and
@item ^
Bitwise exclusive-or
@item |
Bitwise or
@item &&
Logical and
@item ||
Logical or
@end table

All operators, except exponentiation, are left associative.

Note that many @code{m4} implementations use @samp{^} as an alternate
operator for the exponentiation, while many others use @samp{^} for the
bitwise exclusive-or.  GNU @code{m4} changed its behavior: it used to
exponentiate for @samp{^}, it now computes the bitwise exclusive-or.

Numbers without special prefix are given decimal.  A simple @samp{0}
prefix introduces an octal number.  @samp{0x} introduces an hexadecimal
number.  @samp{0b} introduces a binary number.  @samp{0r} introduces a
number expressed in any radix between 1 and 36: the prefix should be
immediately followed by the decimal expression of the radix, a colon,
then the digits making the number.  For any radix, the digits are
@samp{0}, @samp{1}, @samp{2}, @dots{}.  Beyond @samp{9}, the digits are
@samp{a}, @samp{b} @dots{} up to @samp{z}.  Lower and upper case letters
can be used interchangeably in numbers prefixes and as number digits.

Calculations are done in at least 32 bit, but @code{m4} will use wider
integers if available.

Parentheses may be used to group subexpressions whenever needed.  For the
relational operators, a true relation returns @code{1}, and a false
relation return @code{0}.

The builtin macro @code{eval} is recognized only when given arguments.
@end deffn

Here are a few examples of use of @code{eval}.

@comment status: 1
@example
eval(`-3 * 5')
@result{}-15
eval(index(`Hello world', `llo') >= 0)
@result{}1
define(`square', `eval(`($1)**2')')
@result{}
square(`9')
@result{}81
square(square(5)+1)
@result{}676
define(`foo', `666')
@result{}
eval(`foo / 6')
@error{}m4:stdin:7: eval: bad expression: foo / 6
@result{}
eval(foo/6)
@result{}111
@end example

As the second to last example shows, @code{eval} does not handle macro
names, even if they expand to a valid expression (or part of a valid
expression).  Therefore all macros must be expanded before they are
passed to @code{eval}.

If @var{radix} is specified, it specifies the radix to be used in the
expansion.  The default radix is 10.  The result of @code{eval} is
always taken to be signed.  The @var{width} argument specifies a minimum
output width.  The result is zero-padded to extend the expansion to the
requested width.

@example
eval(666, 10)
@result{}666
eval(666, 11)
@result{}556
eval(666, 6)
@result{}3030
eval(666, 6, 10)
@result{}0000003030
eval(-666, 6, 10)
@result{}-000003030
@end example

Take note that @var{radix} cannot be larger than 36.

@node Mpeval
@section Multiple precision arithmetic

When @code{m4} is compiled with a multiple precision arithmetic library
(@pxref{Experiments}), a builtin @code{mpeval} is defined.

@deffn {Builtin (mpeval)} mpeval (@var{expression}, @ovar{radix}, @ovar{width})
It is almost identical to @code{eval}, except the calculations are done
with infinite precision.  Numbers may be of any length.

The @code{:} operator rationally divides two numbers and canonicalizes
the result.  The @code{/} operator always returns the quotient of the
division.  To convert a rational value to integral, divide (@code{/}) by
1.  Some operators such as @code{%}, @code{<<}, @code{>>}, @code{~},
@code{&}, @code{|} and @code{^} operate only on integers and will
truncate any rational remainder.  @code{**} assumes that the exponent is
integral.

The builtin macro @code{mpeval} is recognized only when given arguments.
@end deffn

@node Shell commands
@chapter Macros for running shell commands

@cindex executing shell commands
@cindex running shell commands
@cindex shell commands, running
@cindex UNIX commands, running
@cindex commands, running shell
There are a few builtin macros in @code{m4} that allow you to run shell
commands from within @code{m4}.

@menu
* Platform macros::             Determining the platform
* Syscmd::                      Executing simple commands
* Esyscmd::                     Reading the output of commands
* Sysval::                      Exit status
* Maketemp::                    Making temporary files
@end menu

@node Platform macros
@section Determining the platform
@comment FIXME - port from branch

@node Syscmd
@section Executing simple commands

@deffn {Builtin (m4)} syscmd (@var{shell-command})
Any shell command can be executed, using @code{syscmd}, which executes
@var{shell-command} as a shell command.

The expansion of @code{syscmd} is void, @emph{not} the output from
@var{shell-command}!  Output or error messages from @var{shell-command}
are not read by @code{m4}.  @xref{Esyscmd}, if you need to process the
command output.

Prior to executing the command, @code{m4} flushes its output buffers.
The default standard input, output and error of @var{shell-command} are
the same as those of @code{m4}.

When the @option{--safer} option (@pxref{Invoking m4}) is in effect,
@code{syscmd} results in an error, since otherwise an input file could
execute arbitrary code.

The builtin macro @code{syscmd} is recognized only when given arguments.
@end deffn

@example
define(`foo', `FOO')
@result{}
syscmd(`echo foo')
@result{}foo
@result{}
@end example

Note how the expansion of @code{syscmd} keeps the trailing newline of
the command, as well as using the newline that appeared after the macro.

@comment options: --safer
@comment status: 1
@example
$ @kbd{m4 --safer}
syscmd(`echo hi')
@error{}m4:stdin:1: syscmd: disabled by --safer
@result{}
@end example

@node Esyscmd
@section Reading the output of commands

@cindex GNU extensions
@deffn {Builtin (gnu)} esyscmd (@var{shell-command})
If you want @code{m4} to read the output of a shell command, use
@code{esyscmd}, which expands to the standard output of the shell
command @var{shell-command}.

Prior to executing the command, @code{m4} flushes its output buffers.
The default standard input and standard error of @var{shell-command} are
the same as those of @code{m4}.  The error output of @var{shell-command}
is not a part of the expansion: it will appear along with the error
output of @code{m4}.

@example
define(`foo', `FOO')
@result{}
esyscmd(`echo foo')
@result{}FOO
@result{}
@end example

Note how the expansion of @code{esyscmd} keeps the trailing newline of
the command, as well as using the newline that appeared after the macro.

When the @option{--safer} option (@pxref{Invoking m4}) is in effect,
@code{esyscmd} results in an error, since otherwise an input file could
execute arbitrary code.

The builtin macro @code{esyscmd} is recognized only when given
arguments.
@end deffn

@comment options: --safer
@comment status: 1
@example
$ @kbd{m4 --safer}
esyscmd(`echo hi')
@error{}m4:stdin:1: esyscmd: disabled by --safer
@result{}
@end example

@node Sysval
@section Exit status

@cindex exit code from shell commands
@cindex shell commands, exit code from
@cindex UNIX commands, exit code from
@cindex commands, exit code from shell
@deffn {Builtin (m4)} sysval
To see whether a shell command succeeded, use @code{sysval}, which
expands to the exit status of the last shell command run with
@code{syscmd} or @code{esyscmd}.
@end deffn

@example
syscmd(`false')
@result{}
ifelse(sysval, 0, zero, nonzero)
@result{}nonzero
syscmd(`true')
@result{}
sysval
@result{}0
@end example

When the @option{--safer} option (@pxref{Invoking m4}) is in effect,
@code{sysval} will always remain at its default value of zero.

@comment options: --safer
@comment status: 1
@example
$ @kbd{m4 --safer}
sysval
@result{}0
syscmd(`false')
@error{}m4:stdin:2: syscmd: disabled by --safer
@result{}
sysval
@result{}0
@end example

@node Maketemp
@section Making temporary files

@cindex temporary file names
@cindex files, names of temporary
Commands specified to @code{syscmd} or @code{esyscmd} might need a
temporary file, for output or for some other purpose.

@deffn {Builtin (m4)} maketemp (@var{template})
There is a builtin macro, @code{maketemp}, for making temporary file
names, which expands to a name of a new, empty file, made from the
string @var{template}, which should end with the string @samp{XXXXXX}.
The six @code{X}'s are then replaced, usually with something that
includes the process id of the @code{m4} process, in order to make the
file name unique.

@comment ignore
@example
maketemp(`/tmp/fooXXXXXX')
@result{}/tmp/fooa07346
@end example

When the @option{--safer} option (@pxref{Invoking m4}) is in effect,
@code{maketemp} results in an error, since otherwise an input file could
perform a mild denial-of-service attack by filling up a disk with
multiple empty files.

The builtin macro @code{maketemp} is recognized only when given
arguments.
@end deffn

@comment options: --safer
@comment status: 1
@example
$ @kbd{m4 --safer}
maketemp(`/tmp/fooXXXXXX')
@error{}m4:stdin:1: maketemp: disabled by --safer
@result{}
@end example

@node Miscellaneous
@chapter Miscellaneous builtin macros

This chapter describes various builtins, that do not really belong in
any of the previous chapters.

@menu
* Errprint::                    Printing error messages
* Location::                    Printing current location
* M4exit::                      Exiting from @code{m4}
* Syncoutput::                  Turning on and off sync lines
@end menu

@node Errprint
@section Printing error messages

@cindex printing error messages
@cindex error messages, printing
@cindex messages, printing error
@deffn {Builtin (m4)} errprint (@var{message}, @dots{})
You can print error messages using @code{errprint}, which simply prints
@var{message} and the rest of the arguments on standard error,
independently of the @option{--debugfile} option (@pxref{Invoking m4}).

The expansion of @code{errprint} is void.
@end deffn

@example
errprint(`Illegal arguments to forloop
')
@error{}Illegal arguments to forloop
@result{}
@end example

A trailing newline is @emph{not} printed automatically, so it must be
supplied as part of the argument, as in the example.  (BSD flavored
@code{m4}'s do append a trailing newline on each @code{errprint} call).

@node Location
@section Printing current location

To make it possible to specify the location of the error, two
utility builtins exist:

@deffn {Builtin (gnu)} __file__
@deffnx {Builtin (gnu)} __line__
These expand to the @emph{quoted} name of the current input file, and
the current input line number in that file.

@example
errprint(`m4:'__file__:__line__: `Input error
')
@error{}m4:stdin:1: Input error
@result{}
@end example
@end deffn

@node M4exit
@section Exiting from @code{m4}

@cindex exiting from @code{m4}
@deffn {Builtin (m4)} m4exit (@ovar{code})
If you need to exit from @code{m4} before the entire input has been
read, you can use @code{m4exit}, which causes @code{m4} to exit, with
exit code @var{code}.  If @var{code} is left out, the exit code is
zero.
@end deffn

@comment status: 1
@example
define(`fatal_error',
       `errprint(`m4:'__file__:__line__`: fatal error: $*
')m4exit(1)')
@result{}
fatal_error(`This is a BAD one, buster')
@error{}m4:stdin:4: fatal error: This is a BAD one, buster
@end example

After this macro call, @code{m4} will exit with exit code 1.  This macro
is only intended for error exits, since the normal exit procedures are
not followed, e.g., diverted text is not undiverted, and saved text
(@pxref{M4wrap}) is not reread.

@node Syncoutput
@section Turning on and off sync lines

@cindex Toggling sync lines within @code{m4}
@deffn {Builtin (gnu)} syncoutput (@var{truth})
If you need to toggle sync lines on and off while processing macros, or
to insure that they are off or on, you may do so using
@code{syncoutput}.

If @var{truth} matches the extended regular expression
@samp{^[1yY]|^([oO][nN])}, it causes @code{m4} to emit sync lines of the
form: @code{#line <number> ["<file>"]}.

If @var{truth} is empty, or matches the extended regular expression
@samp{^[0nN]|^([oO][fF])}, it causes @code{m4} to turn sync lines off.

All other arguments are ignored and issue a warning.  The macro
@code{syncoutput} is only recognized with arguments.
@end deffn

@node Frozen files
@chapter Fast loading of frozen state

Some bigger @code{m4} applications may be built over a common base
containing hundreds of definitions and other costly initializations.
Usually, the common base is kept in one or more declarative files,
which files are listed on each @code{m4} invocation prior to the
user's input file, or else, @code{include}'d from this input file.

@menu
* Using frozen files::          Using frozen files
* Frozen file format 1::        Frozen file format 1
* Frozen file format 2::        Frozen file format 2
@end menu

@node Using frozen files
@section Using frozen files

@cindex fast loading of frozen files
@cindex frozen files for fast loading
@cindex initialization, frozen state
@cindex dumping into frozen file
@cindex reloading a frozen file
@cindex GNU extensions
Reading the common base of a big application, over and over again, may
be time consuming.  GNU @code{m4} offers some machinery to speed up
the start of an application using lengthy common bases.  Presume the
user repeatedly uses:

@comment ignore
@example
m4 base.m4 input.m4
@end example

@noindent
with a varying contents of @file{input.m4}, but a rather fixed contents
for @file{base.m4}.  Then, the user might rather execute:

@comment ignore
@example
m4 -F base.m4f base.m4
@end example

@noindent
once, and further execute, as often as needed:

@comment ignore
@example
m4 -R base.m4f input.m4
@end example

@noindent
with the varying input.  The first call, containing the @code{-F}
option, only reads and executes file @file{base.m4}, so defining
various application macros and computing other initializations.  Only
once the input file @file{base.m4} has been completely processed, GNU
@code{m4} produces on @file{base.m4f} a @dfn{frozen} file, that is, a
file which contains a kind of snapshot of the @code{m4} internal state.

Later calls, containing the @code{-R} option, are able to reload
the internal state of @code{m4}'s memory, from @file{base.m4f},
@emph{prior} to reading any other input files.  By this mean,
instead of starting with a virgin copy of @code{m4}, input will be
read after having effectively recovered the effect of a prior run.
In our example, the effect is the same as if file @file{base.m4} has
been read anew.  However, this effect is achieved a lot faster.

Only one frozen file may be created or read in any one @code{m4}
invocation.  It is not possible to recover two frozen files at once.
However, frozen files may be updated incrementally, through using
@code{-R} and @code{-F} options simultaneously.  For example, if
some care is taken, the command:

@comment ignore
@example
m4 file1.m4 file2.m4 file3.m4 file4.m4
@end example

@noindent
could be broken down in the following sequence, accumulating the same
output:

@comment ignore
@example
m4 -F file1.m4f file1.m4
m4 -R file1.m4f -F file2.m4f file2.m4
m4 -R file2.m4f -F file3.m4f file3.m4
m4 -R file3.m4f file4.m4
@end example

This could also be done in a simple way, if everything has been prepared
before:

@comment ignore
@example
m4 -F file1.m4f file1.m4 file2.m4 file3.m4 file4.m4
@end example

Some care is necessary because not every effort has been made for
this to work in all cases.  In particular, the trace attribute of
macros is not handled.
Also, interactions for some options of @code{m4} being used in one call
and not for the next, have not been fully analyzed yet.  On the other
end, you may be confident that stacks of @code{pushdef}'ed definitions
are handled correctly, so are @code{undefine}'d or renamed builtins,
changed strings for quotes or comments.

When an @code{m4} run is to be frozen, the automatic undiversion
which takes place at end of execution is inhibited.  Instead, all
positively numbered diversions are saved into the frozen file.
The active diversion number is also transmitted.

A frozen file to be reloaded need not reside in the current directory.
It is looked up the same way as an @code{include} file (@pxref{Search
Path}).

@node Frozen file format 1
@section Frozen file format 1

Wow - thanks for really reading the manual.  Report this as a bug if
this text is not removed before a release.
FIXME - split out the two formats into separate nodes.

@node Frozen file format 2
@section Frozen file format 2

Frozen files are sharable across architectures.  It is safe to write
a frozen file on one machine and read it on another, given that the
second machine uses the same, or a newer version of GNU @code{m4}.
These are simple (editable) text files, made up of directives,
each starting with a capital letter and ending with a newline
(@key{NL}).  Wherever a directive is expected, the character
@kbd{#} introduces a comment line, empty lines are also ignored.
In the following descriptions, @var{length}s always refer to
corresponding @var{string}s.  Numbers are always expressed in decimal.
The directives are:

@table @code
@item V @var{number} @key{NL}
Confirms the format of the file.  For the version documented here,
@var{number} should be 2.  It is backwards compatible with the previous
version though, so version 1 frozen files can be loaded too if necessary.

@item C @var{length1} , @var{length2} @key{NL} @var{string1} @var{string2} @key{NL}
Uses @var{string1} and @var{string2} as the beginning comment and
end comment strings.

@item Q @var{length1} , @var{length2} @key{NL} @var{string1} @var{string2} @key{NL}
Uses @var{string1} and @var{string2} as the beginning quote and end quote
strings.

@item R @var{length} @key{NL} @var{string} @key{NL}
Sets the default regexp syntax, where @var{string} encodes one of the
regular expression syntaxes supported by @acronym{GNU} M4.
@xref{Changeresyntax}, for more details.

@item M @var{length} @key{NL} @var{string} @key{NL}
Names a module which will be searched for according to the module search path
and loaded.  Modules loaded from a frozen file don't add their builtin entries
to the symbol table.

@item F @var{length} @key{NL} @var{string} @key{ML}
Defines, through @code{pushdef}, a definition for @var{string}
expanding to the function whose builtin name is also @var{string}. The builtin
name is searched for among the intrinsic builtin functions only.

@item F @var{length1} , @var{length2} @key{NL} @var{string1} @var{string2} @key{NL}
Defines, through @code{pushdef}, a definition for @var{string1}
expanding to the function whose builtin name is @var{string2}.  With two
arguments, the builtin name is searched for among the intrinsic builtin
functions only.

@item F @var{length1} , @var{length2} , @var{length3} @key{NL} @var{string1} @var{string2} @var{string3} @key{NL}
Defines, through @code{pushdef}, a definition for @var{string1}
expanding to the function whose builtin name is @var{string2}.  With three
arguments, the builtin name is searched for amongst the builtin functions
defined by the module named by @var{string3}.

@item S @var{syntax-code} @var{length} @key{NL} @var{string} @key{NL}
Defines, through @code{changesyntax}, a syntax category for each of the
characters in @var{string}.  The @var{syntax-code} must be one of the
characters described in @ref{Changesyntax}.

@item T @var{length1} , @var{length2} @key{NL} @var{string1} @var{string2} @key{NL}
Defines, though @code{pushdef}, a definition for @var{string1}
expanding to the text given by @var{string2}.

@item D @var{number}, @var{length} @key{NL} @var{string} @key{NL}
Selects diversion @var{number}, making it current, then copy
@var{string} in the current diversion.  @var{number} may be a negative
number for a non-existing diversion.  To merely specify an active
selection, use this command with an empty @var{string}.  With 0 as the
diversion @var{number}, @var{string} will be issued on standard output
at reload time, however this may not be produced from within @code{m4}.

@end table

@node Compatibility
@chapter Compatibility with other versions of @code{m4}

@cindex compatibility
This chapter describes the differences between this implementation of
@code{m4}, and the implementation found under UNIX, notably System V,
Release 3.

There are also differences in BSD flavors of @code{m4}.  No attempt
is made to summarize these here.

@menu
* Extensions::                  Extensions in @acronym{GNU} M4
* Incompatibilities::           Other incompatibilities
* Experiments::                 Experimental features in @acronym{GNU} M4
@end menu

@node Extensions
@section Extensions in @acronym{GNU} M4

@cindex GNU extensions
@cindex @acronym{POSIX}
@cindex @env{POSIXLY_CORRECT}
This version of @code{m4} contains a few facilities, that do not exist
in System V @code{m4}.  These extra facilities are all suppressed by
using the @samp{-G} command line option, unless overridden by other
command line options.
Most of these extensions are compatible with
@uref{http://www.unix.org/single_unix_specification/,
@acronym{POSIX}}; the few exceptions are suppressed if the
@env{POSIXLY_CORRECT} environment variable is set.

@itemize @bullet
@item
In the @code{$}@var{n} notation for macro arguments, @var{n} can contain
several digits, while the System V @code{m4} only accepts one digit.
This allows macros in GNU @code{m4} to take any number of arguments, and
not only nine (@pxref{Arguments}).
@acronym{POSIX} does not allow this extension, so it is disabled if
@env{POSIXLY_CORRECT} is set.

@item
Files included with @code{include} and @code{sinclude} are sought in a
user specified search path, if they are not found in the working
directory.  The search path is specified by the @samp{-I} option and the
@samp{M4PATH} environment variable (@pxref{Search Path}).

@item
Arguments to @code{undivert} can be non-numeric, in which case the named
file will be included uninterpreted in the output (@pxref{Undivert}).
@acronym{POSIX} does not allow this extension, so it is disabled if
@env{POSIXLY_CORRECT} is set.

@item
Formatted output is supported through the @code{format} builtin, which
is modeled after the C library function @code{printf} (@pxref{Format}).

@item
Searches and text substitution through regular expressions are supported
by the @code{regexp} (@pxref{Regexp}) and @code{patsubst}
(@pxref{Patsubst}) builtins.

@item
The syntax of regular expressions in M4 has never clearly formalized.
While Open BSD M4 uses extended regular expressions for @code{regexp}
and @code{patsubst}, @acronym{GNU} M4 uses basic regular expression.  Use
@code{changeresyntax} (@pxref{Changeresyntax}) to change the regular
expression syntax used by @acronym{GNU} M4.

@item
The output of shell commands can be read into @code{m4} with
@code{esyscmd} (@pxref{Esyscmd}).

@item
There is indirect access to any builtin macro with @code{builtin}
(@pxref{Builtin}).

@item
Macros can be called indirectly through @code{indir} (@pxref{Indir}).

@item
The name of the current input file and the current input line number are
accessible through the builtins @code{__file__} and @code{__line__}
(@pxref{Errprint}).

@item
The generation of sync lines can be controlled through @code{syncoutput}
(@pxref{Syncoutput}).

@item
The format of the output from @code{dumpdef} and macro tracing can be
controlled with @code{debugmode} (@pxref{Debug Levels}).

@item
The destination of trace and debug output can be controlled with
@code{debugfile} (@pxref{Debug Output}).
@end itemize

Additionally, @acronym{POSIX} only requires support for the command line
options @samp{-s}, @samp{-D}, and @samp{-U}, so all other options
accepted by @acronym{GNU} M4 are extensions.  @xref{Invoking m4},
for a description of these options.

Also, the debugging and tracing facilities in GNU @code{m4} are much
more extensive than in most other versions of @code{m4}.

@node Incompatibilities
@section Other incompatibilities

There are a few other incompatibilities between this implementation of
@code{m4}, and the System V version.

@itemize @bullet
@item
GNU @code{m4} implements sync lines differently from System V @code{m4},
when text is being diverted.  GNU @code{m4} outputs the sync lines when
the text is being diverted, and System V @code{m4} when the diverted
text is being brought back.

The problem is which lines and file names should be attached to text that
is being, or has been, diverted.  System V @code{m4} regards all the
diverted text as being generated by the source line containing the
@code{undivert} call, whereas GNU @code{m4} regards the diverted text as
being generated at the time it is diverted.

I expect the sync line option to be used mostly when using @code{m4} as
a front end to a compiler.  If a diverted line causes a compiler error,
the error messages should most probably refer to the place where the
diversion were made, and not where it was inserted again.

@item
GNU @code{m4} makes no attempt at prohibiting self-referential definitions
like:

@comment ignore
@example
define(`x', `x')
@result{}
define(`x', `x ')
@result{}
@end example

There is nothing inherently wrong with defining @samp{x} to
return @samp{x}.  The wrong thing is to expand @samp{x} unquoted.
In @code{m4}, one might use macros to hold strings, as we do for
variables in other programming languages, further checking them with:

@comment ignore
@example
ifelse(defn(`@var{holder}'), `@var{value}', @dots{})
@end example

@noindent
In cases like this one, an interdiction for a macro to hold its own
name would be a useless limitation.  Of course, this leaves more rope
for the GNU @code{m4} user to hang himself!  Rescanning hangs may be
avoided through careful programming, a little like for endless loops
in traditional programming languages.

@item
Some implementations of @code{m4} (Solaris for example) conform to
@acronym{POSIX}, which requires @code{define(@var{macro})} to behave
like @code{undefine(@var{macro})pushdef(@var{macro})}.  Other
implementations, including GNU @code{m4} without the @samp{-G} option
and without @env{POSIXLY_CORRECT} set, treat
@code{define(@var{macro})} as
@code{popdef(@var{macro})pushdef(@var{macro})}.

@item
@findex __gnu__
GNU @code{m4} without @samp{-G} option will define the macro
@code{__gnu__} to expand to the empty string.

@item
@findex unix
@findex __unix__
On UNIX systems, GNU @code{m4} without the @option{-G} option will define
the macro @code{__unix__}, otherwise the macro @code{unix}.  Both will
expand to the empty string.

@item
@findex __windows__
On Windows systems, GNU @code{m4} without the @option{-G} option will
define the macro @code{__windows__}, which expands to the empty string.
@end itemize

@node  Experiments
@section Experimental features in @acronym{GNU} M4

Certain features of GNU @code{m4} are experimental.

Some are only available if activated by an option given to
@code{configure} at GNU @code{m4} installation time.  The functionality
might change or even go away in the future.  @emph{Do not rely on it}.
Please direct your comments about it the same way you would do for bugs.

@section Changesyntax

An experimental feature, which would improve @code{m4} usefulness,
allows for changing the way the input is parsed (@pxref{Changesyntax}).

No compile time option is needed for @code{changesyntax}.

The implementation does not seem to slow down @code{m4}, more likely the
contrary.

@section Multiple precision arithmetic

Another experimental feature, which would improve @code{m4} usefulness,
allows for multiple precision rational arithmetic in @code{eval}.
You should use:

@comment ignore
@example
./configure --with-gmp
@end example

@noindent
if you want this feature compiled in.  The current implementation is
unproven and might go away.  Do not count on it yet.

@node Answers
@chapter Correct version of some examples

Some of the examples in this manuals are buggy.  Correctly working
macros are presented here.

The @code{foreach} macro (@pxref{Foreach}) as presented required the
user to use parentheses to delineate the list.  This approach is
quadratic, because the entire list is propagated through each recursion,
with additional invocations of the shift macro added on each iteration:

@comment FIXME - include(foreach.m4),include(quote.m4)
@comment options: -d-V
@example
define(`foreach', `pushdef(`$1')_foreach($@@)popdef(`$1')')dnl
define(`_arg1', ``$1'')dnl
define(`_foreach',
       `ifelse($2, `()', ,
               `define(`$1',
                       `_arg1$2')$3`'_foreach(`$1', `(shift$2)',
                                              `$3')')')dnl
define(`dquote', ``$@@'')
@result{}
foreach(`macro', (dquote(m4symbols)), `regexp(macro, `shift', `\&')')
@result{}shift
traceon(`shift')
@result{}
foreach(`a', `(1,2,3)', `a
')
@result{}1
@error{}m4trace: -2- shift
@error{}m4trace: -2- shift
@result{}2
@error{}m4trace: -3- shift
@error{}m4trace: -2- shift
@error{}m4trace: -3- shift
@error{}m4trace: -2- shift
@result{}3
@error{}m4trace: -4- shift
@error{}m4trace: -3- shift
@error{}m4trace: -2- shift
@result{}
@end example

An alternative implementation takes a quoted list, with semantics that
the list is expanded once before iteration, and has the benefit that
each iteration operates on a shorter list, giving linear performance on
long lists.  Another way of viewing these semantics is that the
outermost quotes delineates the list, then each element of the list must
be quoted as though the list delimiters were not present.  Notice the
difference when iterating over @code{m4symbols}; we must use
@code{dquote_elt} instead of @code{dquote} to get the necessary quoting.

@comment FIXME - include(foreach.m4),include(quote.m4)
@comment options: -d-V
@example
define(`foreach', `pushdef(`$1')_foreach($@@)popdef(`$1')')dnl
define(`_arg1', ``$1'')dnl
define(`quote', `ifelse(`$#', `0', `', ``$*'')')dnl
define(`dquote', ``$@@'')dnl
define(`dquote_elt', `ifelse(`$#', `0', `', `$#', `1', ```$1''',
                             ```$1'',dquote_elt(shift($@@))')')dnl
define(`_rest', `ifelse(`$#', `1', , `dquote(shift($@@))')')dnl
define(`_foreach',
       `ifelse(quote($2), , ,
               `define(`$1',
                       `_arg1($2)')$3`'_foreach(`$1', _rest($2),
                                                `$3')')')dnl
foreach(`macro', `dquote_elt(m4symbols)',
        `regexp(macro, `shift', `\&')')
@result{}shift
traceon(`shift')
@result{}
foreach(`a', ``1',`2',`3'', `a
')
@result{}1
@error{}m4trace: -3- shift
@result{}2
@error{}m4trace: -3- shift
@result{}3
@result{}
@end example

The @code{cleardivert} macro (@pxref{Cleardiv}) cannot, as it stands, be
called without arguments to clear all pending diversions.  A macro that
achieves that as well is:

@comment ignore
@example
define(`cleardivert',
`pushdef(`_num', divnum)divert(-1)ifelse($#, 0,
  `undivert`'', `undivert($@@)')divert(_num)popdef(`_num')')
@end example

@noindent
If called without arguments, it will call undivert without argument,
otherwise they will be passed to undivert().

@c ========================================================== Appendices

@node Copying This Manual
@appendix How to make copies of this manual
@cindex License

@menu
* GNU Free Documentation License::  License for copying this manual
@end menu

@include fdl.texi

@node Indices
@appendix Indices of concepts and macros

@menu
* Concept index::               Index for many concepts
* Macro index::                 Index for all @code{m4} macros
@end menu

@node Concept index
@appendixsec Index for many concepts

@printindex cp

@node Macro index
@appendixsec Index for all @code{m4} macros

References are exclusively to the places where a builtin is introduced
the first time.

@iftex
@sp 1
@end iftex

@printindex fn

@bye

@c Local Variables:
@c fill-column: 72
@c ispell-local-dictionary: "american"
@c indent-tabs-mode: nil
@c whitespace-check-buffer-indent: nil
@c End:
